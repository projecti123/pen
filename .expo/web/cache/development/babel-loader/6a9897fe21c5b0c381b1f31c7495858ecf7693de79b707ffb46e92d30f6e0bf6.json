{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoLinking from \"./ExpoLinking\";\nimport RNLinking from \"./RNLinking\";\nimport { parse } from \"./createURL\";\nimport { validateURL } from \"./validateURL\";\nexport function addEventListener(type, handler) {\n  return RNLinking.addEventListener(type, handler);\n}\nexport async function parseInitialURLAsync() {\n  const initialUrl = await RNLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null\n    };\n  }\n  return parse(initialUrl);\n}\nexport async function sendIntent(action, extras) {\n  if (Platform.OS === 'android') {\n    return await RNLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\nexport async function openSettings() {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (RNLinking.openSettings) {\n    return await RNLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\nexport async function getInitialURL() {\n  return (await RNLinking.getInitialURL()) ?? null;\n}\nexport function getLinkingURL() {\n  return ExpoLinking.getLinkingURL();\n}\nexport async function openURL(url) {\n  validateURL(url);\n  return await RNLinking.openURL(url);\n}\nexport async function canOpenURL(url) {\n  validateURL(url);\n  return await RNLinking.canOpenURL(url);\n}\nexport function useURL() {\n  const [url, setLink] = useState(null);\n  function onChange(event) {\n    setLink(event.url);\n  }\n  useEffect(() => {\n    getInitialURL().then(url => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n  return url;\n}\nexport function useLinkingURL() {\n  const [url, setLink] = useState(ExpoLinking.getLinkingURL);\n  function onChange(event) {\n    setLink(event.url);\n  }\n  useEffect(() => {\n    const subscription = ExpoLinking.addListener('onURLReceived', onChange);\n    return () => subscription.remove();\n  }, []);\n  return url ?? null;\n}\nexport * from \"./Linking.types\";\nexport * from \"./Schemes\";\nexport { parse, createURL } from \"./createURL\";","map":{"version":3,"names":["UnavailabilityError","useEffect","useState","Platform","ExpoLinking","RNLinking","parse","validateURL","addEventListener","type","handler","parseInitialURLAsync","initialUrl","getInitialURL","scheme","hostname","path","queryParams","sendIntent","action","extras","OS","openSettings","openURL","getLinkingURL","url","canOpenURL","useURL","setLink","onChange","event","then","subscription","remove","useLinkingURL","addListener","createURL"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-linking/src/Linking.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription, Platform } from 'react-native';\n\nimport ExpoLinking from './ExpoLinking';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';\nimport RNLinking from './RNLinking';\nimport { parse } from './createURL';\nimport { validateURL } from './validateURL';\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventtype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native documentation on Linking](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return RNLinking.addEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await RNLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [`expo-intent-launcher`](./intent-launcher) instead. `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await RNLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the appâ€™s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (RNLinking.openSettings) {\n    return await RNLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await RNLinking.getInitialURL()) ?? null;\n}\n\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport function getLinkingURL(): string | null {\n  return ExpoLinking.getLinkingURL();\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open. For example: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await RNLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#linking-from-your-app).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await RNLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\n/**\n * Returns the linking URL followed by any subsequent changes to the URL.\n * Always returns the initial URL immediately on reload.\n * @return Returns the initial URL or `null`.\n */\nexport function useLinkingURL(): string | null {\n  const [url, setLink] = useState<string | null>(ExpoLinking.getLinkingURL);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    const subscription = ExpoLinking.addListener('onURLReceived', onChange as any);\n    return () => subscription.remove();\n  }, []);\n\n  return url ?? null;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\nexport { parse, createURL } from './createURL';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}