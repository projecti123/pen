{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIgnoreList = exports.extrapolateGroups = exports.generateDynamic = exports.getExactRoutes = exports.getRoutes = void 0;\nconst getRoutesCore_1 = require(\"./getRoutesCore\");\nfunction getRoutes(contextModule, options = {}) {\n  return (0, getRoutesCore_1.getRoutes)(contextModule, Object.assign({\n    getSystemRoute({\n      route,\n      type\n    }) {\n      if (route === '' && type === 'layout') {\n        return {\n          type: 'layout',\n          loadRoute: () => ({\n            default: require(\"./views/Navigator\").DefaultNavigator\n          }),\n          contextKey: 'expo-router/build/views/Navigator.js',\n          route: '',\n          generated: true,\n          dynamic: null,\n          children: []\n        };\n      } else if (route === '_sitemap' && type === 'route') {\n        return {\n          loadRoute() {\n            const {\n              Sitemap,\n              getNavOptions\n            } = require(\"./views/Sitemap\");\n            return {\n              default: Sitemap,\n              getNavOptions\n            };\n          },\n          route: '_sitemap',\n          type: 'route',\n          contextKey: 'expo-router/build/views/Sitemap.js',\n          generated: true,\n          internal: true,\n          dynamic: null,\n          children: []\n        };\n      } else if (route === '+not-found' && type === 'route') {\n        return {\n          loadRoute() {\n            return {\n              default: require(\"./views/Unmatched\").Unmatched\n            };\n          },\n          type: 'route',\n          route: '+not-found',\n          contextKey: 'expo-router/build/views/Unmatched.js',\n          generated: true,\n          internal: true,\n          dynamic: [{\n            name: '+not-found',\n            deep: true,\n            notFound: true\n          }],\n          children: []\n        };\n      }\n      throw new Error(`Unknown system route: ${route} and type: ${type}`);\n    }\n  }, options));\n}\nexports.getRoutes = getRoutes;\nfunction getExactRoutes(contextModule, options = {}) {\n  return getRoutes(contextModule, Object.assign({}, options, {\n    skipGenerated: true\n  }));\n}\nexports.getExactRoutes = getExactRoutes;\nvar getRoutesCore_2 = require(\"./getRoutesCore\");\nObject.defineProperty(exports, \"generateDynamic\", {\n  enumerable: true,\n  get: function () {\n    return getRoutesCore_2.generateDynamic;\n  }\n});\nObject.defineProperty(exports, \"extrapolateGroups\", {\n  enumerable: true,\n  get: function () {\n    return getRoutesCore_2.extrapolateGroups;\n  }\n});\nObject.defineProperty(exports, \"getIgnoreList\", {\n  enumerable: true,\n  get: function () {\n    return getRoutesCore_2.getIgnoreList;\n  }\n});","map":{"version":3,"names":["getRoutesCore_1","require","getRoutes","contextModule","options","Object","assign","getSystemRoute","route","type","loadRoute","default","DefaultNavigator","contextKey","generated","dynamic","children","Sitemap","getNavOptions","internal","Unmatched","name","deep","notFound","Error","exports","getExactRoutes","skipGenerated","getRoutesCore_2","defineProperty","enumerable","get","generateDynamic","extrapolateGroups","getIgnoreList"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/getRoutes.ts"],"sourcesContent":["import type { RouteNode } from './Route';\nimport { getRoutes as getRoutesCore, type Options as OptionsCore } from './getRoutesCore';\nimport type { RequireContext } from './types';\n\nexport type Options = Omit<OptionsCore, 'getSystemRoute'>;\n/**\n * Given a Metro context module, return an array of nested routes.\n *\n * This is a two step process:\n *  1. Convert the RequireContext keys (file paths) into a directory tree.\n *      - This should extrapolate array syntax into multiple routes\n *      - Routes are given a specificity score\n *  2. Flatten the directory tree into routes\n *      - Routes in directories without _layout files are hoisted to the nearest _layout\n *      - The name of the route is relative to the nearest _layout\n *      - If multiple routes have the same name, the most specific route is used\n */\nexport function getRoutes(contextModule: RequireContext, options: Options = {}): RouteNode | null {\n  return getRoutesCore(contextModule, {\n    getSystemRoute({ route, type }) {\n      if (route === '' && type === 'layout') {\n        // Root layout when no layout is defined.\n        return {\n          type: 'layout',\n          loadRoute: () => ({\n            default: (require('./views/Navigator') as typeof import('./views/Navigator'))\n              .DefaultNavigator,\n          }),\n          // Generate a fake file name for the directory\n          contextKey: 'expo-router/build/views/Navigator.js',\n          route: '',\n          generated: true,\n          dynamic: null,\n          children: [],\n        };\n      } else if (route === '_sitemap' && type === 'route') {\n        return {\n          loadRoute() {\n            const { Sitemap, getNavOptions } = require('./views/Sitemap');\n            return { default: Sitemap, getNavOptions };\n          },\n          route: '_sitemap',\n          type: 'route',\n          contextKey: 'expo-router/build/views/Sitemap.js',\n          generated: true,\n          internal: true,\n          dynamic: null,\n          children: [],\n        };\n      } else if (route === '+not-found' && type === 'route') {\n        return {\n          loadRoute() {\n            return { default: require('./views/Unmatched').Unmatched };\n          },\n          type: 'route',\n          route: '+not-found',\n          contextKey: 'expo-router/build/views/Unmatched.js',\n          generated: true,\n          internal: true,\n          dynamic: [{ name: '+not-found', deep: true, notFound: true }],\n          children: [],\n        };\n      }\n      throw new Error(`Unknown system route: ${route} and type: ${type}`);\n    },\n    ...options,\n  });\n}\n\nexport function getExactRoutes(\n  contextModule: RequireContext,\n  options: Options = {}\n): RouteNode | null {\n  return getRoutes(contextModule, {\n    ...options,\n    skipGenerated: true,\n  });\n}\n\nexport { generateDynamic, extrapolateGroups, getIgnoreList } from './getRoutesCore';\n"],"mappings":";;;;;;AACA,MAAAA,eAAA,GAAAC,OAAA;AAgBA,SAAgBC,SAASA,CAACC,aAA6B,EAAEC,OAAA,GAAmB,EAAE;EAC5E,OAAO,IAAAJ,eAAA,CAAAE,SAAa,EAACC,aAAa,EAAAE,MAAA,CAAAC,MAAA;IAChCC,cAAcA,CAAC;MAAEC,KAAK;MAAEC;IAAI,CAAE;MAC5B,IAAID,KAAK,KAAK,EAAE,IAAIC,IAAI,KAAK,QAAQ,EAAE;QAErC,OAAO;UACLA,IAAI,EAAE,QAAQ;UACdC,SAAS,EAAEA,CAAA,MAAO;YAChBC,OAAO,EAAGV,OAAO,oBAAoB,CAAwC,CAC1EW;WACJ,CAAC;UAEFC,UAAU,EAAE,sCAAsC;UAClDL,KAAK,EAAE,EAAE;UACTM,SAAS,EAAE,IAAI;UACfC,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAE;SACX;OACF,MAAM,IAAIR,KAAK,KAAK,UAAU,IAAIC,IAAI,KAAK,OAAO,EAAE;QACnD,OAAO;UACLC,SAASA,CAAA;YACP,MAAM;cAAEO,OAAO;cAAEC;YAAa,CAAE,GAAGjB,OAAO,kBAAkB,CAAC;YAC7D,OAAO;cAAEU,OAAO,EAAEM,OAAO;cAAEC;YAAa,CAAE;UAC5C,CAAC;UACDV,KAAK,EAAE,UAAU;UACjBC,IAAI,EAAE,OAAO;UACbI,UAAU,EAAE,oCAAoC;UAChDC,SAAS,EAAE,IAAI;UACfK,QAAQ,EAAE,IAAI;UACdJ,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAE;SACX;OACF,MAAM,IAAIR,KAAK,KAAK,YAAY,IAAIC,IAAI,KAAK,OAAO,EAAE;QACrD,OAAO;UACLC,SAASA,CAAA;YACP,OAAO;cAAEC,OAAO,EAAEV,OAAO,oBAAoB,CAAC,CAACmB;YAAS,CAAE;UAC5D,CAAC;UACDX,IAAI,EAAE,OAAO;UACbD,KAAK,EAAE,YAAY;UACnBK,UAAU,EAAE,sCAAsC;UAClDC,SAAS,EAAE,IAAI;UACfK,QAAQ,EAAE,IAAI;UACdJ,OAAO,EAAE,CAAC;YAAEM,IAAI,EAAE,YAAY;YAAEC,IAAI,EAAE,IAAI;YAAEC,QAAQ,EAAE;UAAI,CAAE,CAAC;UAC7DP,QAAQ,EAAE;SACX;;MAEH,MAAM,IAAIQ,KAAK,CAAC,yBAAyBhB,KAAK,cAAcC,IAAI,EAAE,CAAC;IACrE;EAAC,GACEL,OAAO,CACX,CAAC;AACJ;AAlDAqB,OAAA,CAAAvB,SAAA,GAAAA,SAAA;AAoDA,SAAgBwB,cAAcA,CAC5BvB,aAA6B,EAC7BC,OAAA,GAAmB,EAAE;EAErB,OAAOF,SAAS,CAACC,aAAa,EAAAE,MAAA,CAAAC,MAAA,KACzBF,OAAO;IACVuB,aAAa,EAAE;EAAI,EACpB,CAAC;AACJ;AARAF,OAAA,CAAAC,cAAA,GAAAA,cAAA;AAUA,IAAAE,eAAA,GAAA3B,OAAA;AAASI,MAAA,CAAAwB,cAAA,CAAAJ,OAAA;EAAAK,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAH,eAAA,CAAAI,eAAe;EAAA;AAAA;AAAE3B,MAAA,CAAAwB,cAAA,CAAAJ,OAAA;EAAAK,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAH,eAAA,CAAAK,iBAAiB;EAAA;AAAA;AAAE5B,MAAA,CAAAwB,cAAA,CAAAJ,OAAA;EAAAK,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAH,eAAA,CAAAM,aAAa;EAAA;AAAA","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}