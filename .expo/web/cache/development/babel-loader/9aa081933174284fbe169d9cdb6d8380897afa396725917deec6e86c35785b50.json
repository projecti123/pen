{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getReactNavigationConfig = exports.getReactNavigationScreensConfig = void 0;\nconst matchers_1 = require(\"./matchers\");\nfunction convertDynamicRouteToReactNavigation(segment) {\n  if (segment === 'index') {\n    return '';\n  }\n  if (segment === '+not-found') {\n    return '*not-found';\n  }\n  const rest = (0, matchers_1.matchDeepDynamicRouteName)(segment);\n  if (rest != null) {\n    return '*' + rest;\n  }\n  const dynamicName = (0, matchers_1.matchDynamicName)(segment);\n  if (dynamicName != null) {\n    return `:${dynamicName}`;\n  }\n  return segment;\n}\nfunction parseRouteSegments(segments) {\n  return (segments.split('/').map(convertDynamicRouteToReactNavigation).filter(Boolean).join('/')\n  );\n}\nfunction convertRouteNodeToScreen(node, metaOnly) {\n  const path = parseRouteSegments(node.route);\n  if (!node.children.length) {\n    if (!metaOnly) {\n      return {\n        path,\n        screens: {},\n        _route: node\n      };\n    }\n    return path;\n  }\n  const screens = getReactNavigationScreensConfig(node.children, metaOnly);\n  const screen = {\n    path,\n    screens\n  };\n  if (node.initialRouteName) {\n    screen.initialRouteName = node.initialRouteName;\n  }\n  if (!metaOnly) {\n    screen._route = node;\n  }\n  return screen;\n}\nfunction getReactNavigationScreensConfig(nodes, metaOnly) {\n  return Object.fromEntries(nodes.map(node => [node.route, convertRouteNodeToScreen(node, metaOnly)]));\n}\nexports.getReactNavigationScreensConfig = getReactNavigationScreensConfig;\nfunction getReactNavigationConfig(routes, metaOnly) {\n  const config = {\n    initialRouteName: undefined,\n    screens: getReactNavigationScreensConfig(routes.children, metaOnly)\n  };\n  if (routes.initialRouteName) {\n    config.initialRouteName = routes.initialRouteName;\n  }\n  return config;\n}\nexports.getReactNavigationConfig = getReactNavigationConfig;","map":{"version":3,"names":["matchers_1","require","convertDynamicRouteToReactNavigation","segment","rest","matchDeepDynamicRouteName","dynamicName","matchDynamicName","parseRouteSegments","segments","split","map","filter","Boolean","join","convertRouteNodeToScreen","node","metaOnly","path","route","children","length","screens","_route","getReactNavigationScreensConfig","screen","initialRouteName","nodes","Object","fromEntries","exports","getReactNavigationConfig","routes","config","undefined"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/getReactNavigationConfig.ts"],"sourcesContent":["import type { RouteNode } from './Route';\nimport { matchDeepDynamicRouteName, matchDynamicName } from './matchers';\n\nexport type Screen =\n  | string\n  | {\n      path: string;\n      screens: Record<string, Screen>;\n      _route?: RouteNode;\n      initialRouteName?: string;\n    };\n\n// `[page]` -> `:page`\n// `page` -> `page`\nfunction convertDynamicRouteToReactNavigation(segment: string): string {\n  // NOTE(EvanBacon): To support shared routes we preserve group segments.\n  if (segment === 'index') {\n    return '';\n  }\n  if (segment === '+not-found') {\n    return '*not-found';\n  }\n\n  const rest = matchDeepDynamicRouteName(segment);\n  if (rest != null) {\n    return '*' + rest;\n  }\n  const dynamicName = matchDynamicName(segment);\n\n  if (dynamicName != null) {\n    return `:${dynamicName}`;\n  }\n\n  return segment;\n}\n\nfunction parseRouteSegments(segments: string): string {\n  return (\n    // NOTE(EvanBacon): When there are nested routes without layouts\n    // the node.route will be something like `app/home/index`\n    // this needs to be split to ensure each segment is parsed correctly.\n    segments\n      .split('/')\n      // Convert each segment to a React Navigation format.\n      .map(convertDynamicRouteToReactNavigation)\n      // Remove any empty paths from groups or index routes.\n      .filter(Boolean)\n      // Join to return as a path.\n      .join('/')\n  );\n}\n\nfunction convertRouteNodeToScreen(node: RouteNode, metaOnly: boolean): Screen {\n  const path = parseRouteSegments(node.route);\n  if (!node.children.length) {\n    if (!metaOnly) {\n      return {\n        path,\n        screens: {},\n        _route: node,\n      };\n    }\n    return path;\n  }\n  const screens = getReactNavigationScreensConfig(node.children, metaOnly);\n\n  const screen: Screen = {\n    path,\n    screens,\n  };\n\n  if (node.initialRouteName) {\n    // NOTE(EvanBacon): This is bad because it forces all Layout Routes\n    // to be loaded into memory. We should move towards a system where\n    // the initial route name is either loaded asynchronously in the Layout Route\n    // or defined via a file system convention.\n    screen.initialRouteName = node.initialRouteName;\n  }\n\n  if (!metaOnly) {\n    screen._route = node;\n  }\n\n  return screen;\n}\n\nexport function getReactNavigationScreensConfig(\n  nodes: RouteNode[],\n  metaOnly: boolean\n): Record<string, Screen> {\n  return Object.fromEntries(\n    nodes.map((node) => [node.route, convertRouteNodeToScreen(node, metaOnly)] as const)\n  );\n}\n\nexport function getReactNavigationConfig(routes: RouteNode, metaOnly: boolean) {\n  const config = {\n    initialRouteName: undefined,\n    screens: getReactNavigationScreensConfig(routes.children, metaOnly),\n  };\n\n  if (routes.initialRouteName) {\n    // We're using LinkingOptions the generic type is `object` instead of a proper ParamList.\n    // So we need to cast the initialRouteName to `any` to avoid type errors.\n    config.initialRouteName = routes.initialRouteName as any;\n  }\n  return config;\n}\n"],"mappings":";;;;;;AACA,MAAAA,UAAA,GAAAC,OAAA;AAaA,SAASC,oCAAoCA,CAACC,OAAe;EAE3D,IAAIA,OAAO,KAAK,OAAO,EAAE;IACvB,OAAO,EAAE;;EAEX,IAAIA,OAAO,KAAK,YAAY,EAAE;IAC5B,OAAO,YAAY;;EAGrB,MAAMC,IAAI,GAAG,IAAAJ,UAAA,CAAAK,yBAAyB,EAACF,OAAO,CAAC;EAC/C,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChB,OAAO,GAAG,GAAGA,IAAI;;EAEnB,MAAME,WAAW,GAAG,IAAAN,UAAA,CAAAO,gBAAgB,EAACJ,OAAO,CAAC;EAE7C,IAAIG,WAAW,IAAI,IAAI,EAAE;IACvB,OAAO,IAAIA,WAAW,EAAE;;EAG1B,OAAOH,OAAO;AAChB;AAEA,SAASK,kBAAkBA,CAACC,QAAgB;EAC1C,QAIEA,QAAQ,CACLC,KAAK,CAAC,GAAG,CAAC,CAEVC,GAAG,CAACT,oCAAoC,CAAC,CAEzCU,MAAM,CAACC,OAAO,CAAC,CAEfC,IAAI,CAAC,GAAG;EAAC;AAEhB;AAEA,SAASC,wBAAwBA,CAACC,IAAe,EAAEC,QAAiB;EAClE,MAAMC,IAAI,GAAGV,kBAAkB,CAACQ,IAAI,CAACG,KAAK,CAAC;EAC3C,IAAI,CAACH,IAAI,CAACI,QAAQ,CAACC,MAAM,EAAE;IACzB,IAAI,CAACJ,QAAQ,EAAE;MACb,OAAO;QACLC,IAAI;QACJI,OAAO,EAAE,EAAE;QACXC,MAAM,EAAEP;OACT;;IAEH,OAAOE,IAAI;;EAEb,MAAMI,OAAO,GAAGE,+BAA+B,CAACR,IAAI,CAACI,QAAQ,EAAEH,QAAQ,CAAC;EAExE,MAAMQ,MAAM,GAAW;IACrBP,IAAI;IACJI;GACD;EAED,IAAIN,IAAI,CAACU,gBAAgB,EAAE;IAKzBD,MAAM,CAACC,gBAAgB,GAAGV,IAAI,CAACU,gBAAgB;;EAGjD,IAAI,CAACT,QAAQ,EAAE;IACbQ,MAAM,CAACF,MAAM,GAAGP,IAAI;;EAGtB,OAAOS,MAAM;AACf;AAEA,SAAgBD,+BAA+BA,CAC7CG,KAAkB,EAClBV,QAAiB;EAEjB,OAAOW,MAAM,CAACC,WAAW,CACvBF,KAAK,CAAChB,GAAG,CAAEK,IAAI,IAAK,CAACA,IAAI,CAACG,KAAK,EAAEJ,wBAAwB,CAACC,IAAI,EAAEC,QAAQ,CAAC,CAAU,CAAC,CACrF;AACH;AAPAa,OAAA,CAAAN,+BAAA,GAAAA,+BAAA;AASA,SAAgBO,wBAAwBA,CAACC,MAAiB,EAAEf,QAAiB;EAC3E,MAAMgB,MAAM,GAAG;IACbP,gBAAgB,EAAEQ,SAAS;IAC3BZ,OAAO,EAAEE,+BAA+B,CAACQ,MAAM,CAACZ,QAAQ,EAAEH,QAAQ;GACnE;EAED,IAAIe,MAAM,CAACN,gBAAgB,EAAE;IAG3BO,MAAM,CAACP,gBAAgB,GAAGM,MAAM,CAACN,gBAAuB;;EAE1D,OAAOO,MAAM;AACf;AAZAH,OAAA,CAAAC,wBAAA,GAAAA,wBAAA","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}