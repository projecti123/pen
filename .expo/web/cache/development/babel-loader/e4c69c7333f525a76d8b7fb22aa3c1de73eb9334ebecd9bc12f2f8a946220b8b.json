{"ast":null,"code":"import * as LogBoxSymbolication from \"./LogBoxSymbolication\";\nfunction componentStackToStack(componentStack) {\n  return componentStack.map(stack => ({\n    file: stack.fileName,\n    methodName: stack.content,\n    lineNumber: stack.location?.row ?? 0,\n    column: stack.location?.column ?? 0,\n    arguments: []\n  }));\n}\nexport class LogBoxLog {\n  symbolicated = {\n    stack: {\n      error: null,\n      stack: null,\n      status: 'NONE'\n    },\n    component: {\n      error: null,\n      stack: null,\n      status: 'NONE'\n    }\n  };\n  callbacks = new Map();\n  constructor(data) {\n    this.level = data.level;\n    this.type = data.type ?? 'error';\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = data.symbolicated ?? this.symbolicated;\n  }\n  incrementCount() {\n    this.count += 1;\n  }\n  getAvailableStack(type) {\n    if (this.symbolicated[type].status === 'COMPLETE') {\n      return this.symbolicated[type].stack;\n    }\n    return this.getStack(type);\n  }\n  flushCallbacks(type) {\n    const callbacks = this.callbacks.get(type);\n    const status = this.symbolicated[type].status;\n    if (callbacks) {\n      for (const callback of callbacks) {\n        callback(status);\n      }\n      callbacks.clear();\n    }\n  }\n  pushCallback(type, callback) {\n    let callbacks = this.callbacks.get(type);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.callbacks.set(type, callbacks);\n    }\n    callbacks.add(callback);\n  }\n  retrySymbolicate(type, callback) {\n    this._symbolicate(type, true, callback);\n  }\n  symbolicate(type, callback) {\n    this._symbolicate(type, false, callback);\n  }\n  _symbolicate(type, retry, callback) {\n    if (callback) {\n      this.pushCallback(type, callback);\n    }\n    const status = this.symbolicated[type].status;\n    if (status === 'COMPLETE') {\n      return this.flushCallbacks(type);\n    }\n    if (retry) {\n      LogBoxSymbolication.deleteStack(this.getStack(type));\n      this.handleSymbolicate(type);\n    } else {\n      if (status === 'NONE') {\n        this.handleSymbolicate(type);\n      }\n    }\n  }\n  componentStackCache = null;\n  getStack(type) {\n    if (type === 'component') {\n      if (this.componentStackCache == null) {\n        this.componentStackCache = componentStackToStack(this.componentStack);\n      }\n      return this.componentStackCache;\n    }\n    return this.stack;\n  }\n  handleSymbolicate(type) {\n    if (type === 'component' && !this.componentStack?.length) {\n      return;\n    }\n    if (this.symbolicated[type].status !== 'PENDING') {\n      this.updateStatus(type, null, null, null);\n      LogBoxSymbolication.symbolicate(ensureStackFilesHaveParams(this.getStack(type))).then(data => {\n        this.updateStatus(type, null, data?.stack, data?.codeFrame);\n      }, error => {\n        this.updateStatus(type, error, null, null);\n      });\n    }\n  }\n  updateStatus(type, error, stack, codeFrame) {\n    const lastStatus = this.symbolicated[type].status;\n    if (error != null) {\n      this.symbolicated[type] = {\n        error,\n        stack: null,\n        status: 'FAILED'\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n      this.symbolicated[type] = {\n        error: null,\n        stack,\n        status: 'COMPLETE'\n      };\n    } else {\n      this.symbolicated[type] = {\n        error: null,\n        stack: null,\n        status: 'PENDING'\n      };\n    }\n    const status = this.symbolicated[type].status;\n    if (lastStatus !== status) {\n      if (['COMPLETE', 'FAILED'].includes(status)) {\n        this.flushCallbacks(type);\n      }\n    }\n  }\n}\nfunction ensureStackFilesHaveParams(stack) {\n  const currentSrc = typeof document !== 'undefined' && document.currentScript ? 'src' in document.currentScript && document.currentScript.src || null : null;\n  const currentParams = currentSrc ? new URLSearchParams(currentSrc) : new URLSearchParams({\n    platform: 'web',\n    dev: String(__DEV__)\n  });\n  return stack.map(frame => {\n    if (!frame.file?.startsWith('http') || frame.file.includes('&platform=')) return frame;\n    const url = new URL(frame.file);\n    if (url.searchParams.has('platform')) {\n      return frame;\n    }\n    currentParams.forEach((value, key) => {\n      if (url.searchParams.has(key)) return;\n      url.searchParams.set(key, value);\n    });\n    return Object.assign({}, frame, {\n      file: url.toString()\n    });\n  });\n}","map":{"version":3,"names":["LogBoxSymbolication","componentStackToStack","componentStack","map","stack","file","fileName","methodName","content","lineNumber","location","row","column","arguments","LogBoxLog","symbolicated","error","status","component","callbacks","Map","constructor","data","level","type","message","category","codeFrame","isComponentError","count","incrementCount","getAvailableStack","getStack","flushCallbacks","get","callback","clear","pushCallback","Set","set","add","retrySymbolicate","_symbolicate","symbolicate","retry","deleteStack","handleSymbolicate","componentStackCache","length","updateStatus","ensureStackFilesHaveParams","then","lastStatus","includes","currentSrc","document","currentScript","src","currentParams","URLSearchParams","platform","dev","String","__DEV__","frame","startsWith","url","URL","searchParams","has","forEach","value","key","Object","assign","toString"],"sources":["/Users/tanishakumari/StudySphere/node_modules/@expo/metro-runtime/src/error-overlay/Data/LogBoxLog.ts"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\nimport type { Stack } from './LogBoxSymbolication';\nimport type { Category, Message, ComponentStack, CodeFrame } from './parseLogBoxLog';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax' | 'static';\n\nexport type LogBoxLogData = {\n  level: LogLevel;\n  type?: string;\n  message: Message;\n  stack: Stack;\n  category: string;\n  componentStack: ComponentStack;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n};\n\nexport type StackType = 'stack' | 'component';\n\nfunction componentStackToStack(componentStack: ComponentStack): Stack {\n  return componentStack.map((stack) => ({\n    file: stack.fileName,\n    methodName: stack.content,\n    lineNumber: stack.location?.row ?? 0,\n    column: stack.location?.column ?? 0,\n    arguments: [],\n  }));\n}\n\ntype SymbolicationCallback = (status: SymbolicationStatus) => void;\n\ntype SymbolicationResult =\n  | { error: null; stack: null; status: 'NONE' }\n  | { error: null; stack: null; status: 'PENDING' }\n  | { error: null; stack: Stack; status: 'COMPLETE' }\n  | { error: Error; stack: null; status: 'FAILED' };\n\nexport class LogBoxLog {\n  message: Message;\n  type: string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame?: CodeFrame;\n  isComponentError: boolean;\n  symbolicated: Record<StackType, SymbolicationResult> = {\n    stack: {\n      error: null,\n      stack: null,\n      status: 'NONE',\n    },\n    component: {\n      error: null,\n      stack: null,\n      status: 'NONE',\n    },\n  };\n\n  private callbacks: Map<StackType, Set<SymbolicationCallback>> = new Map();\n\n  constructor(\n    data: LogBoxLogData & {\n      symbolicated?: Record<StackType, SymbolicationResult>;\n    }\n  ) {\n    this.level = data.level;\n    this.type = data.type ?? 'error';\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.count = 1;\n    this.symbolicated = data.symbolicated ?? this.symbolicated;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(type: StackType): Stack | null {\n    if (this.symbolicated[type].status === 'COMPLETE') {\n      return this.symbolicated[type].stack;\n    }\n    return this.getStack(type);\n  }\n\n  private flushCallbacks(type: StackType): void {\n    const callbacks = this.callbacks.get(type);\n    const status = this.symbolicated[type].status;\n    if (callbacks) {\n      for (const callback of callbacks) {\n        callback(status);\n      }\n      callbacks.clear();\n    }\n  }\n\n  private pushCallback(type: StackType, callback: SymbolicationCallback): void {\n    let callbacks = this.callbacks.get(type);\n    if (!callbacks) {\n      callbacks = new Set();\n      this.callbacks.set(type, callbacks);\n    }\n    callbacks.add(callback);\n  }\n\n  retrySymbolicate(type: StackType, callback?: (status: SymbolicationStatus) => void): void {\n    this._symbolicate(type, true, callback);\n  }\n\n  symbolicate(type: StackType, callback?: (status: SymbolicationStatus) => void): void {\n    this._symbolicate(type, false, callback);\n  }\n\n  private _symbolicate(\n    type: StackType,\n    retry: boolean,\n    callback?: (status: SymbolicationStatus) => void\n  ): void {\n    if (callback) {\n      this.pushCallback(type, callback);\n    }\n    const status = this.symbolicated[type].status;\n\n    if (status === 'COMPLETE') {\n      return this.flushCallbacks(type);\n    }\n\n    if (retry) {\n      LogBoxSymbolication.deleteStack(this.getStack(type));\n      this.handleSymbolicate(type);\n    } else {\n      if (status === 'NONE') {\n        this.handleSymbolicate(type);\n      }\n    }\n  }\n\n  private componentStackCache: Stack | null = null;\n\n  private getStack(type: StackType): Stack {\n    if (type === 'component') {\n      if (this.componentStackCache == null) {\n        this.componentStackCache = componentStackToStack(this.componentStack);\n      }\n      return this.componentStackCache;\n    }\n    return this.stack;\n  }\n\n  private handleSymbolicate(type: StackType): void {\n    if (type === 'component' && !this.componentStack?.length) {\n      return;\n    }\n\n    if (this.symbolicated[type].status !== 'PENDING') {\n      this.updateStatus(type, null, null, null);\n      LogBoxSymbolication.symbolicate(ensureStackFilesHaveParams(this.getStack(type))).then(\n        (data) => {\n          this.updateStatus(type, null, data?.stack, data?.codeFrame);\n        },\n        (error) => {\n          this.updateStatus(type, error, null, null);\n        }\n      );\n    }\n  }\n\n  private updateStatus(\n    type: StackType,\n    error?: Error | null,\n    stack?: Stack | null,\n    codeFrame?: CodeFrame | null\n  ): void {\n    const lastStatus = this.symbolicated[type].status;\n    if (error != null) {\n      this.symbolicated[type] = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated[type] = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated[type] = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    const status = this.symbolicated[type].status;\n    if (lastStatus !== status) {\n      if (['COMPLETE', 'FAILED'].includes(status)) {\n        this.flushCallbacks(type);\n      }\n    }\n  }\n}\n\n// Sometime the web stacks don't have correct query params, this can lead to Metro errors when it attempts to resolve without a platform.\n// This will attempt to reconcile the issue by adding the current query params to the stack frames if they exist, or fallback to some common defaults.\nfunction ensureStackFilesHaveParams(stack: Stack): Stack {\n  const currentSrc =\n    typeof document !== 'undefined' && document.currentScript\n      ? ('src' in document.currentScript && document.currentScript.src) || null\n      : null;\n\n  const currentParams = currentSrc\n    ? new URLSearchParams(currentSrc)\n    : new URLSearchParams({\n        platform: 'web',\n        dev: String(__DEV__),\n      });\n\n  return stack.map((frame) => {\n    if (\n      !frame.file?.startsWith('http') ||\n      // Account for Metro malformed URLs\n      frame.file.includes('&platform=')\n    )\n      return frame;\n\n    const url = new URL(frame.file);\n    if (url.searchParams.has('platform')) {\n      return frame;\n    }\n\n    currentParams.forEach((value, key) => {\n      if (url.searchParams.has(key)) return;\n      url.searchParams.set(key, value);\n    });\n\n    return { ...frame, file: url.toString() };\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}