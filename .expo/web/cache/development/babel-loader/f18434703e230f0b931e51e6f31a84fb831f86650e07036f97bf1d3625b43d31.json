{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInitializeExpoRouter = exports.useStoreRouteInfo = exports.useStoreRootState = exports.useExpoRouter = exports.store = exports.RouterStore = void 0;\nconst native_1 = require(\"@react-navigation/native\");\nconst expo_constants_1 = __importDefault(require(\"expo-constants\"));\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst react_1 = require(\"react\");\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst routing_1 = require(\"./routing\");\nconst sort_routes_1 = require(\"./sort-routes\");\nconst LocationProvider_1 = require(\"../LocationProvider\");\nconst getPathFromState_1 = require(\"../fork/getPathFromState\");\nconst getLinkingConfig_1 = require(\"../getLinkingConfig\");\nconst getRoutes_1 = require(\"../getRoutes\");\nconst href_1 = require(\"../link/href\");\nconst useScreens_1 = require(\"../useScreens\");\nconst SplashScreen = __importStar(require(\"../views/Splash\"));\nclass RouterStore {\n  hasAttemptedToHideSplash = false;\n  rootStateSubscribers = new Set();\n  storeSubscribers = new Set();\n  linkTo = routing_1.linkTo.bind(this);\n  getSortedRoutes = sort_routes_1.getSortedRoutes.bind(this);\n  goBack = routing_1.goBack.bind(this);\n  canGoBack = routing_1.canGoBack.bind(this);\n  push = routing_1.push.bind(this);\n  dismiss = routing_1.dismiss.bind(this);\n  dismissTo = routing_1.dismissTo.bind(this);\n  replace = routing_1.replace.bind(this);\n  dismissAll = routing_1.dismissAll.bind(this);\n  canDismiss = routing_1.canDismiss.bind(this);\n  setParams = routing_1.setParams.bind(this);\n  navigate = routing_1.navigate.bind(this);\n  reload = routing_1.reload.bind(this);\n  initialize(context, navigationRef, linkingConfigOptions = {}) {\n    this.initialState = undefined;\n    this.rootState = undefined;\n    this.nextState = undefined;\n    this.linking = undefined;\n    this.navigationRefSubscription?.();\n    this.rootStateSubscribers.clear();\n    this.storeSubscribers.clear();\n    this.routeNode = (0, getRoutes_1.getRoutes)(context, Object.assign({}, expo_constants_1.default.expoConfig?.extra?.router, {\n      ignoreEntryPoints: true,\n      platform: react_native_1.Platform.OS\n    }));\n    this.routeInfo = {\n      unstable_globalHref: '',\n      pathname: '',\n      isIndex: false,\n      params: {},\n      segments: []\n    };\n    if (this.routeNode) {\n      this.linking = (0, getLinkingConfig_1.getLinkingConfig)(this, this.routeNode, context, linkingConfigOptions);\n      this.rootComponent = (0, useScreens_1.getQualifiedRouteComponent)(this.routeNode);\n      const initialURL = this.linking?.getInitialURL?.();\n      if (typeof initialURL === 'string') {\n        this.rootState = this.linking.getStateFromPath?.(initialURL, this.linking.config);\n        this.initialState = this.rootState;\n        if (this.rootState) {\n          this.routeInfo = this.getRouteInfo(this.rootState);\n        }\n      }\n    } else {\n      if (process.env.NODE_ENV === 'production') {\n        throw new Error('No routes found');\n      }\n      this.rootComponent = react_1.Fragment;\n    }\n    this.navigationRef = navigationRef;\n    this.navigationRefSubscription = navigationRef.addListener('state', data => {\n      const state = data.data.state;\n      if (!this.hasAttemptedToHideSplash) {\n        this.hasAttemptedToHideSplash = true;\n        this.splashScreenAnimationFrame = requestAnimationFrame(() => {\n          SplashScreen._internal_maybeHideAsync?.();\n        });\n      }\n      let shouldUpdateSubscribers = this.nextState === state;\n      this.nextState = undefined;\n      if (state && state !== this.rootState) {\n        exports.store.updateState(state, undefined);\n        shouldUpdateSubscribers = true;\n      }\n      if (shouldUpdateSubscribers) {\n        for (const subscriber of this.rootStateSubscribers) {\n          subscriber();\n        }\n      }\n    });\n    for (const subscriber of this.storeSubscribers) {\n      subscriber();\n    }\n  }\n  updateState(state, nextState = state) {\n    exports.store.rootState = state;\n    exports.store.nextState = nextState;\n    const nextRouteInfo = exports.store.getRouteInfo(state);\n    if (!(0, fast_deep_equal_1.default)(this.routeInfo, nextRouteInfo)) {\n      exports.store.routeInfo = nextRouteInfo;\n    }\n  }\n  getRouteInfo(state) {\n    return (0, LocationProvider_1.getRouteInfoFromState)((state, asPath) => {\n      return (0, getPathFromState_1.getPathDataFromState)(state, Object.assign({\n        screens: {}\n      }, this.linking?.config, {\n        preserveDynamicRoutes: asPath,\n        preserveGroups: asPath,\n        shouldEncodeURISegment: false\n      }));\n    }, state);\n  }\n  shouldShowTutorial() {\n    return !this.routeNode && process.env.NODE_ENV === 'development';\n  }\n  subscribeToRootState = subscriber => {\n    this.rootStateSubscribers.add(subscriber);\n    return () => this.rootStateSubscribers.delete(subscriber);\n  };\n  subscribeToStore = subscriber => {\n    this.storeSubscribers.add(subscriber);\n    return () => this.storeSubscribers.delete(subscriber);\n  };\n  snapshot = () => {\n    return this;\n  };\n  rootStateSnapshot = () => {\n    return this.rootState;\n  };\n  routeInfoSnapshot = () => {\n    return this.routeInfo;\n  };\n  cleanup() {\n    if (this.splashScreenAnimationFrame) {\n      cancelAnimationFrame(this.splashScreenAnimationFrame);\n    }\n  }\n  getStateFromPath(href, options = {}) {\n    href = (0, href_1.resolveHref)(href);\n    href = (0, href_1.resolveHrefStringWithSegments)(href, this.routeInfo, options);\n    return this.linking?.getStateFromPath?.(href, this.linking.config);\n  }\n}\nexports.RouterStore = RouterStore;\nexports.store = new RouterStore();\nfunction useExpoRouter() {\n  return (0, react_1.useSyncExternalStore)(exports.store.subscribeToStore, exports.store.snapshot, exports.store.snapshot);\n}\nexports.useExpoRouter = useExpoRouter;\nfunction syncStoreRootState() {\n  if (exports.store.navigationRef.isReady()) {\n    const currentState = exports.store.navigationRef.getRootState();\n    if (exports.store.rootState !== currentState) {\n      exports.store.updateState(currentState);\n    }\n  }\n}\nfunction useStoreRootState() {\n  syncStoreRootState();\n  return (0, react_1.useSyncExternalStore)(exports.store.subscribeToRootState, exports.store.rootStateSnapshot, exports.store.rootStateSnapshot);\n}\nexports.useStoreRootState = useStoreRootState;\nfunction useStoreRouteInfo() {\n  syncStoreRootState();\n  return (0, react_1.useSyncExternalStore)(exports.store.subscribeToRootState, exports.store.routeInfoSnapshot, exports.store.routeInfoSnapshot);\n}\nexports.useStoreRouteInfo = useStoreRouteInfo;\nfunction useInitializeExpoRouter(context, options) {\n  const navigationRef = (0, native_1.useNavigationContainerRef)();\n  (0, react_1.useMemo)(() => exports.store.initialize(context, navigationRef, options), [context]);\n  useExpoRouter();\n  return exports.store;\n}\nexports.useInitializeExpoRouter = useInitializeExpoRouter;","map":{"version":3,"names":["native_1","require","expo_constants_1","__importDefault","fast_deep_equal_1","react_1","react_native_1","routing_1","sort_routes_1","LocationProvider_1","getPathFromState_1","getLinkingConfig_1","getRoutes_1","href_1","useScreens_1","SplashScreen","__importStar","RouterStore","hasAttemptedToHideSplash","rootStateSubscribers","Set","storeSubscribers","linkTo","bind","getSortedRoutes","goBack","canGoBack","push","dismiss","dismissTo","replace","dismissAll","canDismiss","setParams","navigate","reload","initialize","context","navigationRef","linkingConfigOptions","initialState","undefined","rootState","nextState","linking","navigationRefSubscription","clear","routeNode","getRoutes","Object","assign","default","expoConfig","extra","router","ignoreEntryPoints","platform","Platform","OS","routeInfo","unstable_globalHref","pathname","isIndex","params","segments","getLinkingConfig","rootComponent","getQualifiedRouteComponent","initialURL","getInitialURL","getStateFromPath","config","getRouteInfo","process","env","NODE_ENV","Error","Fragment","addListener","data","state","splashScreenAnimationFrame","requestAnimationFrame","_internal_maybeHideAsync","shouldUpdateSubscribers","exports","store","updateState","subscriber","nextRouteInfo","getRouteInfoFromState","asPath","getPathDataFromState","screens","preserveDynamicRoutes","preserveGroups","shouldEncodeURISegment","shouldShowTutorial","subscribeToRootState","add","delete","subscribeToStore","snapshot","rootStateSnapshot","routeInfoSnapshot","cleanup","cancelAnimationFrame","href","options","resolveHref","resolveHrefStringWithSegments","useExpoRouter","useSyncExternalStore","syncStoreRootState","isReady","currentState","getRootState","useStoreRootState","useStoreRouteInfo","useInitializeExpoRouter","useNavigationContainerRef","useMemo"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/global-state/router-store.tsx"],"sourcesContent":["'use client';\n\nimport {\n  NavigationContainerRefWithCurrent,\n  useNavigationContainerRef,\n} from '@react-navigation/native';\nimport Constants from 'expo-constants';\nimport equal from 'fast-deep-equal';\nimport { useSyncExternalStore, useMemo, ComponentType, Fragment } from 'react';\nimport { Platform } from 'react-native';\n\nimport {\n  canGoBack,\n  canDismiss,\n  goBack,\n  linkTo,\n  navigate,\n  dismiss,\n  dismissAll,\n  push,\n  reload,\n  replace,\n  setParams,\n  dismissTo,\n  LinkToOptions,\n} from './routing';\nimport { getSortedRoutes } from './sort-routes';\nimport { UrlObject, getRouteInfoFromState } from '../LocationProvider';\nimport { RouteNode } from '../Route';\nimport { getPathDataFromState, getPathFromState } from '../fork/getPathFromState';\n// import { ResultState } from '../fork/getStateFromPath';\nimport { ExpoLinkingOptions, LinkingConfigOptions, getLinkingConfig } from '../getLinkingConfig';\nimport { getRoutes } from '../getRoutes';\nimport { resolveHref, resolveHrefStringWithSegments } from '../link/href';\nimport { Href, RequireContext } from '../types';\nimport { getQualifiedRouteComponent } from '../useScreens';\nimport * as SplashScreen from '../views/Splash';\n\ntype ResultState = any;\n\n/**\n * This is the global state for the router. It is used to keep track of the current route, and to provide a way to navigate to other routes.\n *\n * There should only be one instance of this class and be initialized via `useInitializeExpoRouter`\n */\nexport class RouterStore {\n  routeNode!: RouteNode | null;\n  rootComponent!: ComponentType;\n  linking?: ExpoLinkingOptions;\n  private hasAttemptedToHideSplash: boolean = false;\n\n  initialState?: ResultState;\n  rootState?: ResultState;\n  nextState?: ResultState;\n  routeInfo?: UrlObject;\n  splashScreenAnimationFrame?: number;\n\n  navigationRef!: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>;\n  navigationRefSubscription!: () => void;\n\n  rootStateSubscribers = new Set<() => void>();\n  storeSubscribers = new Set<() => void>();\n\n  linkTo = linkTo.bind(this);\n  getSortedRoutes = getSortedRoutes.bind(this);\n  goBack = goBack.bind(this);\n  canGoBack = canGoBack.bind(this);\n  push = push.bind(this);\n  dismiss = dismiss.bind(this);\n  dismissTo = dismissTo.bind(this);\n  replace = replace.bind(this);\n  dismissAll = dismissAll.bind(this);\n  canDismiss = canDismiss.bind(this);\n  setParams = setParams.bind(this);\n  navigate = navigate.bind(this);\n  reload = reload.bind(this);\n\n  initialize(\n    context: RequireContext,\n    navigationRef: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>,\n    linkingConfigOptions: LinkingConfigOptions = {}\n  ) {\n    // Clean up any previous state\n    this.initialState = undefined;\n    this.rootState = undefined;\n    this.nextState = undefined;\n    this.linking = undefined;\n    this.navigationRefSubscription?.();\n    this.rootStateSubscribers.clear();\n    this.storeSubscribers.clear();\n\n    this.routeNode = getRoutes(context, {\n      ...Constants.expoConfig?.extra?.router,\n      ignoreEntryPoints: true,\n      platform: Platform.OS,\n    });\n\n    // We always needs routeInfo, even if there are no routes. This can happen if:\n    //  - there are no routes (we are showing the onboarding screen)\n    //  - getInitialURL() is async\n    this.routeInfo = {\n      unstable_globalHref: '',\n      pathname: '',\n      isIndex: false,\n      params: {},\n      segments: [],\n    };\n\n    if (this.routeNode) {\n      // We have routes, so get the linking config and the root component\n      this.linking = getLinkingConfig(this, this.routeNode, context, linkingConfigOptions);\n      this.rootComponent = getQualifiedRouteComponent(this.routeNode);\n\n      // By default React Navigation is async and does not render anything in the first pass as it waits for `getInitialURL`\n      // This will cause static rendering to fail, which once performs a single pass.\n      // If the initialURL is a string, we can preload the state and routeInfo, skipping React Navigation's async behavior.\n      const initialURL = this.linking?.getInitialURL?.();\n      if (typeof initialURL === 'string') {\n        this.rootState = this.linking.getStateFromPath?.(initialURL, this.linking.config);\n        this.initialState = this.rootState;\n        if (this.rootState) {\n          this.routeInfo = this.getRouteInfo(this.rootState);\n        }\n      }\n    } else {\n      // Only error in production, in development we will show the onboarding screen\n      if (process.env.NODE_ENV === 'production') {\n        throw new Error('No routes found');\n      }\n\n      // In development, we will show the onboarding screen\n      this.rootComponent = Fragment;\n    }\n\n    /**\n     * Counter intuitively - this fires AFTER both React Navigation's state changes and the subsequent paint.\n     * This poses a couple of issues for Expo Router,\n     *   - Ensuring hooks (e.g. useSearchParams()) have data in the initial render\n     *   - Reacting to state changes after a navigation event\n     *\n     * This is why the initial render renders a Fragment and we wait until `onReady()` is called\n     * Additionally, some hooks compare the state from both the store and the navigationRef. If the store it stale,\n     * that hooks will manually update the store.\n     *\n     */\n    this.navigationRef = navigationRef;\n    this.navigationRefSubscription = navigationRef.addListener('state', (data) => {\n      const state = data.data.state as ResultState;\n\n      if (!this.hasAttemptedToHideSplash) {\n        this.hasAttemptedToHideSplash = true;\n        // NOTE(EvanBacon): `navigationRef.isReady` is sometimes not true when state is called initially.\n        this.splashScreenAnimationFrame = requestAnimationFrame(() => {\n          SplashScreen._internal_maybeHideAsync?.();\n        });\n      }\n\n      let shouldUpdateSubscribers = this.nextState === state;\n      this.nextState = undefined;\n\n      // This can sometimes be undefined when an error is thrown in the Root Layout Route.\n      // Additionally that state may already equal the rootState if it was updated within a hook\n      if (state && state !== this.rootState) {\n        store.updateState(state, undefined);\n        shouldUpdateSubscribers = true;\n      }\n\n      // If the state has changed, or was changed inside a hook we need to update the subscribers\n      if (shouldUpdateSubscribers) {\n        for (const subscriber of this.rootStateSubscribers) {\n          subscriber();\n        }\n      }\n    });\n\n    for (const subscriber of this.storeSubscribers) {\n      subscriber();\n    }\n  }\n\n  updateState(state: ResultState, nextState = state) {\n    store.rootState = state;\n    store.nextState = nextState;\n\n    const nextRouteInfo = store.getRouteInfo(state);\n\n    if (!equal(this.routeInfo, nextRouteInfo)) {\n      store.routeInfo = nextRouteInfo;\n    }\n  }\n\n  getRouteInfo(state: ResultState) {\n    return getRouteInfoFromState(\n      (state: Parameters<typeof getPathFromState>[0], asPath: boolean) => {\n        return getPathDataFromState(state, {\n          screens: {},\n          ...this.linking?.config,\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath,\n          shouldEncodeURISegment: false,\n        });\n      },\n      state\n    );\n  }\n\n  // This is only used in development, to show the onboarding screen\n  // In production we should have errored during the initialization\n  shouldShowTutorial() {\n    return !this.routeNode && process.env.NODE_ENV === 'development';\n  }\n\n  /** Make sure these are arrow functions so `this` is correctly bound */\n  subscribeToRootState = (subscriber: () => void) => {\n    this.rootStateSubscribers.add(subscriber);\n    return () => this.rootStateSubscribers.delete(subscriber);\n  };\n  subscribeToStore = (subscriber: () => void) => {\n    this.storeSubscribers.add(subscriber);\n    return () => this.storeSubscribers.delete(subscriber);\n  };\n  snapshot = () => {\n    return this;\n  };\n  rootStateSnapshot = () => {\n    return this.rootState!;\n  };\n  routeInfoSnapshot = () => {\n    return this.routeInfo!;\n  };\n\n  cleanup() {\n    if (this.splashScreenAnimationFrame) {\n      cancelAnimationFrame(this.splashScreenAnimationFrame);\n    }\n  }\n\n  getStateFromPath(href: Href, options: LinkToOptions = {}) {\n    href = resolveHref(href);\n    href = resolveHrefStringWithSegments(href, this.routeInfo, options);\n    return this.linking?.getStateFromPath?.(href, this.linking.config);\n  }\n}\n\nexport const store = new RouterStore();\n\nexport function useExpoRouter() {\n  return useSyncExternalStore(store.subscribeToStore, store.snapshot, store.snapshot);\n}\n\nfunction syncStoreRootState() {\n  if (store.navigationRef.isReady()) {\n    const currentState = store.navigationRef.getRootState() as unknown as ResultState;\n\n    if (store.rootState !== currentState) {\n      store.updateState(currentState);\n    }\n  }\n}\n\nexport function useStoreRootState() {\n  syncStoreRootState();\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.rootStateSnapshot,\n    store.rootStateSnapshot\n  );\n}\n\nexport function useStoreRouteInfo() {\n  syncStoreRootState();\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.routeInfoSnapshot,\n    store.routeInfoSnapshot\n  );\n}\n\nexport function useInitializeExpoRouter(context: RequireContext, options: LinkingConfigOptions) {\n  const navigationRef = useNavigationContainerRef();\n  useMemo(() => store.initialize(context, navigationRef, options), [context]);\n  useExpoRouter();\n  return store;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}