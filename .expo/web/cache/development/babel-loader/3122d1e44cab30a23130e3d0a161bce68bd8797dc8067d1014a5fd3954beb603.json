{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport { CodedError, requireOptionalNativeModule } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from \"./Constants.types\";\nimport ExponentConstants from \"./ExponentConstants\";\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\nconst ExpoUpdates = requireOptionalNativeModule('ExpoUpdates');\nlet rawUpdatesManifest = null;\nif (ExpoUpdates) {\n  let updatesManifest;\n  if (ExpoUpdates.manifest) {\n    updatesManifest = ExpoUpdates.manifest;\n  } else if (ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawUpdatesManifest = updatesManifest;\n  }\n}\nlet rawDevLauncherManifest = null;\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawDevLauncherManifest = devLauncherManifest;\n  }\n}\nlet rawAppConfig = null;\nif (ExponentConstants && ExponentConstants.manifest) {\n  const appConfig = ExponentConstants.manifest;\n  if (typeof appConfig === 'string') {\n    rawAppConfig = JSON.parse(appConfig);\n  } else {\n    rawAppConfig = appConfig;\n  }\n}\nlet rawManifest = rawUpdatesManifest ?? rawDevLauncherManifest ?? rawAppConfig;\nconst _ref = ExponentConstants || {},\n  {\n    appOwnership\n  } = _ref,\n  nativeConstants = _objectWithoutPropertiesLoose(_ref, [\"name\", \"appOwnership\"]);\nconst constants = Object.assign({}, nativeConstants, {\n  appOwnership: appOwnership ?? null\n});\nObject.defineProperties(constants, {\n  __unsafeNoWarnManifest: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest2: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  manifest: {\n    get() {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  manifest2: {\n    get() {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  expoConfig: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (ExpoUpdates && ExpoUpdates.isEmbeddedLaunch) {\n        return rawAppConfig;\n      }\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  expoGoConfig: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoGo ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  easConfig: {\n    get() {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.eas ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  __rawManifest_TEST: {\n    get() {\n      return rawManifest;\n    },\n    set(value) {\n      rawManifest = value;\n    },\n    enumerable: false\n  }\n});\nfunction isEmbeddedManifest(manifest) {\n  return !isExpoUpdatesManifest(manifest);\n}\nfunction isExpoUpdatesManifest(manifest) {\n  return 'metadata' in manifest;\n}\nfunction getManifest(suppressWarning = false) {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(`Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`);\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', `Constants.manifest is ${invalidManifestType}, must be an object.`);\n    }\n  }\n  return rawManifest;\n}\nexport default constants;","map":{"version":3,"names":["CodedError","requireOptionalNativeModule","Platform","NativeModules","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","ExpoUpdates","rawUpdatesManifest","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","rawDevLauncherManifest","EXDevLauncher","devLauncherManifest","rawAppConfig","appConfig","rawManifest","_ref","appOwnership","nativeConstants","_objectWithoutPropertiesLoose","constants","assign","defineProperties","__unsafeNoWarnManifest","get","maybeManifest","getManifest","isEmbeddedManifest","enumerable","__unsafeNoWarnManifest2","isExpoUpdatesManifest","manifest2","expoConfig","isEmbeddedLaunch","extra","expoClient","expoGoConfig","expoGo","easConfig","eas","__rawManifest_TEST","set","value","suppressWarning","invalidManifestType","executionEnvironment","Bare","OS","StoreClient","Standalone"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-constants/src/Constants.ts"],"sourcesContent":["import type { ExpoConfig } from 'expo/config';\n// @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\nimport type { Manifest as DevLauncherManifest } from 'expo-dev-launcher';\nimport type {\n  EmbeddedManifest,\n  EASConfig,\n  ExpoGoConfig,\n  ExpoUpdatesManifest,\n  // @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\n} from 'expo-manifests';\nimport { CodedError, requireOptionalNativeModule } from 'expo-modules-core';\n// @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\nimport type { Manifest as UpdatesManifest, ExpoUpdatesModule } from 'expo-updates';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nconst ExpoUpdates = requireOptionalNativeModule<ExpoUpdatesModule>('ExpoUpdates');\n\nlet rawUpdatesManifest: UpdatesManifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (ExpoUpdates) {\n  let updatesManifest: object | undefined;\n  if (ExpoUpdates.manifest) {\n    updatesManifest = ExpoUpdates.manifest;\n  } else if (ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawUpdatesManifest = updatesManifest as any;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nlet rawDevLauncherManifest: DevLauncherManifest | null = null;\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawDevLauncherManifest = devLauncherManifest as any;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nlet rawAppConfig: ExpoConfig | null = null;\nif (ExponentConstants && ExponentConstants.manifest) {\n  const appConfig: object | string = ExponentConstants.manifest;\n\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof appConfig === 'string') {\n    rawAppConfig = JSON.parse(appConfig);\n  } else {\n    rawAppConfig = appConfig as any;\n  }\n}\n\ntype RawManifest = UpdatesManifest | DevLauncherManifest | ExpoConfig;\nlet rawManifest: RawManifest | null = rawUpdatesManifest ?? rawDevLauncherManifest ?? rawAppConfig;\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nObject.defineProperties(constants, {\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get(): EmbeddedManifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  __unsafeNoWarnManifest2: {\n    get(): ExpoUpdatesManifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  manifest: {\n    get(): EmbeddedManifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isEmbeddedManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  manifest2: {\n    get(): ExpoUpdatesManifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isExpoUpdatesManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  expoConfig: {\n    get():\n      | (ExpoConfig & {\n          /**\n           * Only present during development using @expo/cli.\n           */\n          hostUri?: string;\n        })\n      | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      // if running an embedded update, maybeManifest is a EmbeddedManifest which doesn't have\n      // the expo config. Instead, the embedded expo-constants app.config should be used.\n      if (ExpoUpdates && ExpoUpdates.isEmbeddedLaunch) {\n        return rawAppConfig;\n      }\n\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  expoGoConfig: {\n    get(): ExpoGoConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoGo ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  easConfig: {\n    get(): EASConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isExpoUpdatesManifest(maybeManifest)) {\n        return maybeManifest.extra?.eas ?? null;\n      } else if (isEmbeddedManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  __rawManifest_TEST: {\n    get(): RawManifest | null {\n      return rawManifest;\n    },\n    set(value: RawManifest | null) {\n      rawManifest = value;\n    },\n    enumerable: false,\n  },\n});\n\nfunction isEmbeddedManifest(manifest: RawManifest): manifest is EmbeddedManifest {\n  return !isExpoUpdatesManifest(manifest);\n}\n\nfunction isExpoUpdatesManifest(manifest: RawManifest): manifest is ExpoUpdatesManifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): RawManifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}