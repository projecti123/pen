{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useLinking = exports.series = void 0;\nconst native_1 = require(\"@react-navigation/native\");\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst React = __importStar(require(\"react\"));\nconst createMemoryHistory_1 = require(\"./createMemoryHistory\");\nconst getPathFromState_1 = require(\"./getPathFromState\");\nconst serverLocationContext_1 = require(\"../global-state/serverLocationContext\");\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state;\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\nconst series = cb => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\nexports.series = series;\nconst linkingHandlers = [];\nfunction useLinking(ref, {\n  enabled = true,\n  config,\n  getStateFromPath = native_1.getStateFromPath,\n  getPathFromState = native_1.getPathFromState,\n  getActionFromState = native_1.getActionFromState\n}, onUnhandledLinking) {\n  const independent = (0, native_1.useNavigationIndependentTree)();\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    const handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory_1.createMemoryHistory);\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const validateRoutesNotExistInRootState = React.useCallback(state => {\n    const navigation = ref.current;\n    const rootState = navigation?.getRootState();\n    return state?.routes.some(r => !rootState?.routeNames.includes(r.name));\n  }, [ref]);\n  const server = React.useContext(serverLocationContext_1.ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n    if (enabledRef.current) {\n      const location = server?.location ?? (true ? window.location : undefined);\n      const path = location ? location.pathname + location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n      onUnhandledLinking(path);\n    }\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const {\n        location\n      } = window;\n      const path = location.pathname + location.search + location.hash;\n      const index = history.index;\n      const previousIndex = previousIndexRef.current ?? 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      const record = history.get(index);\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      const state = getStateFromPathRef.current(path, configRef.current);\n      if (state) {\n        onUnhandledLinking(path);\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n        if (index > previousIndex || (index === previousIndex && (!record || `${record?.path}${location.hash}` === path))) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n    const getPathForRoute = (route, state) => {\n      let path;\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          const focusedRoute = (0, native_1.findFocusedRoute)(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && (0, fast_deep_equal_1.default)(Object.assign({}, focusedRoute.params), Object.assign({}, route.params))) {\n            path = (0, getPathFromState_1.appendBaseUrl)(route.path);\n          }\n        }\n      }\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n      return path;\n    };\n    if (ref.current) {\n      const state = ref.current.getRootState();\n      if (state) {\n        const route = (0, native_1.findFocusedRoute)(state);\n        const path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n    const onStateChange = async () => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n      if (!state) {\n        return;\n      }\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = (0, native_1.findFocusedRoute)(state);\n      const path = getPathForRoute(route, state);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n      if (previousFocusedState && focusedState && path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n        if (historyDelta > 0) {\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex && history.get(nextIndex - currentIndex)) {\n              await history.go(nextIndex - currentIndex);\n            } else {\n              await history.go(historyDelta);\n            }\n            history.replace({\n              path,\n              state\n            });\n          } catch {}\n        } else {\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        history.replace({\n          path,\n          state\n        });\n      }\n    };\n    return ref.current?.addListener('state', (0, exports.series)(onStateChange));\n  }, [enabled, history, ref]);\n  return {\n    getInitialState\n  };\n}\nexports.useLinking = useLinking;","map":{"version":3,"names":["native_1","require","fast_deep_equal_1","__importDefault","React","__importStar","createMemoryHistory_1","getPathFromState_1","serverLocationContext_1","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","queue","Promise","resolve","callback","then","exports","linkingHandlers","useLinking","ref","enabled","config","getStateFromPath","getPathFromState","getActionFromState","onUnhandledLinking","independent","useNavigationIndependentTree","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","createMemoryHistory","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","validateRoutesNotExistInRootState","useCallback","navigation","rootState","getRootState","some","r","routeNames","includes","name","server","useContext","ServerContext","getInitialState","value","location","window","path","pathname","search","thenable","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","hash","previousIndex","record","get","resetRoot","action","dispatch","e","warn","message","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","default","Object","assign","params","appendBaseUrl","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/fork/useLinking.ts"],"sourcesContent":["import {\n  LinkingOptions,\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  type NavigationContainerRef,\n  type NavigationState,\n  type ParamListBase,\n  useNavigationIndependentTree,\n} from '@react-navigation/native';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\n\nimport { createMemoryHistory } from './createMemoryHistory';\nimport { appendBaseUrl } from './getPathFromState';\nimport { ServerContext } from '../global-state/serverLocationContext';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nexport const series = (cb: () => Promise<void>) => {\n  let queue = Promise.resolve();\n  const callback = () => {\n    queue = queue.then(cb);\n  };\n  return callback;\n};\n\nconst linkingHandlers: symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase>;\n\nexport function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options,\n  onUnhandledLinking: (lastUnhandledLining: string | undefined) => void\n) {\n  const independent = useNavigationIndependentTree();\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const validateRoutesNotExistInRootState = React.useCallback(\n    (state: ResultState) => {\n      const navigation = ref.current;\n      const rootState = navigation?.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state?.routes.some((r) => !rootState?.routeNames.includes(r.name));\n    },\n    [ref]\n  );\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ?? (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n\n      // If the link were handled, it gets cleared in NavigationContainer\n      onUnhandledLinking(path);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const { location } = window;\n\n      const path = location.pathname + location.search + location.hash;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        if (validateRoutesNotExistInRootState(state)) {\n          return;\n        }\n\n        if (\n          index > previousIndex ||\n          /* START FORK\n           *\n           * This is a workaround for React Navigation's handling of hashes (it doesn't handle them)\n           * When you click on <a href=\"#hash\">, the browser will first fire a popstate event\n           * and this callback will be called.\n           *\n           * From React Navigation's perspective, it's treating the new hash change like a back/forward\n           * button press, so it thinks it should reset the state. When we should\n           * be to be pushing the new state\n           *\n           * Our fix is to check if the index is the same as the previous index\n           * and if the incoming path is the same as the old path but with the hash added,\n           * then treat it as a push instead of a reset\n           *\n           * This also works for subsequent hash changes, as internally RN\n           * doesn't store the hash in the history state.\n           *\n           * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n           */\n          (index === previousIndex && (!record || `${record?.path}${location.hash}` === path))\n          // END FORK\n        ) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e ? e.message : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      let path;\n\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual({ ...focusedRoute.params }, { ...route.params })\n          ) {\n            // START FORK - Ensure paths coming from events (e.g refresh) have the base URL\n            // path = route.path;\n            path = appendBaseUrl(route.path);\n            // END FORK\n          }\n        }\n      }\n\n      if (path == null) {\n        path = getPathFromStateRef.current(state, configRef.current);\n      }\n\n      // START FORK - ExpoRouter manually handles hashes. This code is intentionally removed\n      // const previousRoute = previousStateRef.current\n      //   ? findFocusedRoute(previousStateRef.current)\n      //   : undefined;\n\n      // Preserve the hash if the route didn't change\n      // if (\n      //   previousRoute &&\n      //   route &&\n      //   'key' in previousRoute &&\n      //   'key' in route &&\n      //   previousRoute.key === route.key\n      // ) {\n      //   path = path + location.hash;\n      // }\n      // END FORK\n\n      return path;\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history ? focusedState.history.length : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (\n              nextIndex !== -1 &&\n              nextIndex < currentIndex &&\n              // We should only go back if the entry exists and it's less than current index\n              history.get(nextIndex - currentIndex)\n            ) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  }, [enabled, history, ref]);\n\n  return {\n    getInitialState,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}