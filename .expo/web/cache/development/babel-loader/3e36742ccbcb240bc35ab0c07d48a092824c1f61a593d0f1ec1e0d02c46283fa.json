{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSearchParams = exports.useLocalSearchParams = exports.useGlobalSearchParams = exports.usePathname = exports.useSegments = exports.useUnstableGlobalHref = exports.useRouter = exports.useNavigationContainerRef = exports.useRootNavigation = exports.useRouteInfo = exports.useRootNavigationState = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst Route_1 = require(\"./Route\");\nconst router_store_1 = require(\"./global-state/router-store\");\nfunction useRootNavigationState() {\n  return (0, router_store_1.useStoreRootState)();\n}\nexports.useRootNavigationState = useRootNavigationState;\nfunction useRouteInfo() {\n  return (0, router_store_1.useStoreRouteInfo)();\n}\nexports.useRouteInfo = useRouteInfo;\nfunction useRootNavigation() {\n  return router_store_1.store.navigationRef.current;\n}\nexports.useRootNavigation = useRootNavigation;\nfunction useNavigationContainerRef() {\n  return router_store_1.store.navigationRef;\n}\nexports.useNavigationContainerRef = useNavigationContainerRef;\nfunction useRouter() {\n  return react_1.default.useMemo(() => ({\n    push: router_store_1.store.push,\n    dismiss: router_store_1.store.dismiss,\n    dismissAll: router_store_1.store.dismissAll,\n    dismissTo: router_store_1.store.dismissTo,\n    canDismiss: router_store_1.store.canDismiss,\n    back: router_store_1.store.goBack,\n    replace: router_store_1.store.replace,\n    setParams: router_store_1.store.setParams,\n    canGoBack: router_store_1.store.canGoBack,\n    navigate: router_store_1.store.navigate,\n    reload: router_store_1.store.reload\n  }), []);\n}\nexports.useRouter = useRouter;\nfunction useUnstableGlobalHref() {\n  return (0, router_store_1.useStoreRouteInfo)().unstable_globalHref;\n}\nexports.useUnstableGlobalHref = useUnstableGlobalHref;\nfunction useSegments() {\n  return (0, router_store_1.useStoreRouteInfo)().segments;\n}\nexports.useSegments = useSegments;\nfunction usePathname() {\n  return (0, router_store_1.useStoreRouteInfo)().pathname;\n}\nexports.usePathname = usePathname;\nfunction useGlobalSearchParams() {\n  return (0, router_store_1.useStoreRouteInfo)().params;\n}\nexports.useGlobalSearchParams = useGlobalSearchParams;\nfunction useLocalSearchParams() {\n  const params = react_1.default.useContext(Route_1.LocalRouteParamsContext) ?? {};\n  return Object.fromEntries(Object.entries(params).map(([key, value]) => {\n    if (Array.isArray(value)) {\n      return [key, value.map(v => {\n        try {\n          return decodeURIComponent(v);\n        } catch {\n          return v;\n        }\n      })];\n    } else {\n      try {\n        return [key, decodeURIComponent(value)];\n      } catch {\n        return [key, value];\n      }\n    }\n  }));\n}\nexports.useLocalSearchParams = useLocalSearchParams;\nfunction useSearchParams({\n  global = false\n} = {}) {\n  const globalRef = react_1.default.useRef(global);\n  if (process.env.NODE_ENV !== 'production') {\n    if (global !== globalRef.current) {\n      console.warn(`Detected change in 'global' option of useSearchParams. This value cannot change between renders`);\n    }\n  }\n  const params = global ? useGlobalSearchParams() : useLocalSearchParams();\n  const entries = Object.entries(params).flatMap(([key, value]) => {\n    if (global) {\n      if (key === 'params') return [];\n      if (key === 'screen') return [];\n    }\n    return Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]];\n  });\n  return new ReadOnlyURLSearchParams(entries);\n}\nexports.useSearchParams = useSearchParams;\nclass ReadOnlyURLSearchParams extends URLSearchParams {\n  set() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  append() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  delete() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n}","map":{"version":3,"names":["react_1","__importDefault","require","Route_1","router_store_1","useRootNavigationState","useStoreRootState","exports","useRouteInfo","useStoreRouteInfo","useRootNavigation","store","navigationRef","current","useNavigationContainerRef","useRouter","default","useMemo","push","dismiss","dismissAll","dismissTo","canDismiss","back","goBack","replace","setParams","canGoBack","navigate","reload","useUnstableGlobalHref","unstable_globalHref","useSegments","segments","usePathname","pathname","useGlobalSearchParams","params","useLocalSearchParams","useContext","LocalRouteParamsContext","Object","fromEntries","entries","map","key","value","Array","isArray","v","decodeURIComponent","useSearchParams","global","globalRef","useRef","process","env","NODE_ENV","console","warn","flatMap","ReadOnlyURLSearchParams","URLSearchParams","set","Error","append","delete"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/hooks.ts"],"sourcesContent":["'use client';\n\nimport React from 'react';\n\nimport { LocalRouteParamsContext } from './Route';\nimport { store, useStoreRootState, useStoreRouteInfo } from './global-state/router-store';\nimport { Router } from './imperative-api';\nimport { RouteParams, RouteSegments, UnknownOutputParams, Route } from './types';\n\n/**\n * Returns the [navigation state](https://reactnavigation.org/docs/navigation-state/)\n * of the navigator which contains the current screen.\n *\n * @example\n * ```tsx\n * import { useRootNavigationState } from 'expo-router';\n *\n * export default function Route() {\n *  const { routes } = useRootNavigationState();\n *\n *  return <Text>{routes[0].name}</Text>;\n * }\n * ```\n */\nexport function useRootNavigationState() {\n  return useStoreRootState();\n}\n\nexport function useRouteInfo() {\n  return useStoreRouteInfo();\n}\n\n/**\n * @deprecated Use [`useNavigationContainerRef`](#usenavigationcontainerref) instead,\n * which returns a React `ref`.\n */\nexport function useRootNavigation() {\n  return store.navigationRef.current;\n}\n\n/**\n * @return The root `<NavigationContainer />` ref for the app. The `ref.current` may be `null`\n * if the `<NavigationContainer />` hasn't mounted yet.\n */\nexport function useNavigationContainerRef() {\n  return store.navigationRef;\n}\n\n/**\n *\n * Returns the [Router](#router) object for imperative navigation.\n *\n * @example\n *```tsx\n * import { useRouter } from 'expo-router';\n * import { Text } from 'react-native';\n *\n * export default function Route() {\n *  const router = useRouter();\n *\n *  return (\n *   <Text onPress={() => router.push('/home')}>Go Home</Text>\n *  );\n *}\n * ```\n */\nexport function useRouter(): Router {\n  return React.useMemo(\n    () => ({\n      push: store.push,\n      dismiss: store.dismiss,\n      dismissAll: store.dismissAll,\n      dismissTo: store.dismissTo,\n      canDismiss: store.canDismiss,\n      back: store.goBack,\n      replace: store.replace,\n      setParams: store.setParams,\n      canGoBack: store.canGoBack,\n      navigate: store.navigate,\n      reload: store.reload,\n    }),\n    []\n  );\n}\n\n/**\n * @private\n * @returns The current global pathname with query params attached. This may change in the future to include the hostname\n * from a predefined universal link. For example, `/foobar?hey=world` becomes `https://acme.dev/foobar?hey=world`.\n */\nexport function useUnstableGlobalHref(): string {\n  return useStoreRouteInfo().unstable_globalHref;\n}\n\n/**\n * Returns a list of selected file segments for the currently selected route. Segments are not normalized,\n * so they will be the same as the file path. For example, `/[id]?id=normal` becomes `[\"[id]\"]`.\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useSegments } from 'expo-router';\n *\n * export default function Route() {\n *   // segments = [\"profile\", \"[user]\"]\n *   const segments = useSegments();\n *\n *   return <Text>Hello</Text>;\n * }\n * ```\n *\n *\n * `useSegments` can be typed using an abstract. Consider the following file structure:\n *\n * ```md\n * - app\n *   - [user]\n *     - index.tsx\n *     - followers.tsx\n *   - settings.tsx\n * ```\n *\n *\n * This can be strictly typed using the following abstract with `useSegments` hook:\n *\n * ```tsx\n * const [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n * ```\n */\nexport function useSegments<TSegments extends Route = Route>(): RouteSegments<TSegments>;\nexport function useSegments<TSegments extends RouteSegments<Route>>(): TSegments;\nexport function useSegments() {\n  return useStoreRouteInfo().segments;\n}\n\n/**\n * Returns the currently selected route location without search parameters. For example, `/acme?foo=bar` returns `/acme`.\n * Segments will be normalized. For example, `/[id]?id=normal` becomes `/normal`.\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useSegments } from 'expo-router';\n *\n * export default function Route() {\n *   // segments = [\"profile\", \"[user]\"]\n *   const segments = useSegments();\n *\n *   return <Text>Hello</Text>;\n * }\n * ```\n */\nexport function usePathname(): string {\n  return useStoreRouteInfo().pathname;\n}\n\n/**\n * Returns URL parameters for globally selected route, including dynamic path segments.\n * This function updates even when the route is not focused. Useful for analytics or\n * other background operations that don't draw to the screen.\n *\n * Route URL example: `acme://profile/baconbrix?extra=info`.\n *\n * When querying search params in a stack, opt-towards using\n * [`useLocalSearchParams`](#uselocalsearchparams) because it will only update when the route is focused.\n *\n * > **Note:** For usage information, see\n * [Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters).\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useGlobalSearchParams } from 'expo-router';\n *\n * export default function Route() {\n *   // user=baconbrix & extra=info\n *   const { user, extra } = useGlobalSearchParams();\n *\n *   return <Text>User: {user}</Text>;\n * }\n * ```\n */\nexport function useGlobalSearchParams<\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): TParams;\nexport function useGlobalSearchParams<TRoute extends Route>(): RouteParams<TRoute>;\nexport function useGlobalSearchParams<\n  TRoute extends Route,\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): RouteParams<TRoute> & TParams;\nexport function useGlobalSearchParams() {\n  return useStoreRouteInfo().params;\n}\n\n/**\n * Returns the URL parameters for the contextually focused route. Useful for stacks where you may push a new screen\n * that changes the query parameters.  For dynamic routes, both the route parameters and the search parameters are returned.\n *\n * Route URL example: `acme://profile/baconbrix?extra=info`.\n *\n * To observe updates even when the invoking route is not focused, use [`useGlobalSearchParams`](#useglobalsearchparams).\n *\n * > **Note:** For usage information, see\n * [Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters).\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useLocalSearchParams } from 'expo-router';\n *\n * export default function Route() {\n *  // user=baconbrix & extra=info\n *  const { user, extra } = useLocalSearchParams();\n *\n *  return <Text>User: {user}</Text>;\n * }\n */\nexport function useLocalSearchParams<\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): TParams;\nexport function useLocalSearchParams<TRoute extends Route>(): RouteParams<TRoute>;\nexport function useLocalSearchParams<\n  TRoute extends Route,\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): RouteParams<TRoute> & TParams;\nexport function useLocalSearchParams() {\n  const params = React.useContext(LocalRouteParamsContext) ?? {};\n  return Object.fromEntries(\n    Object.entries(params).map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return [\n          key,\n          value.map((v) => {\n            try {\n              return decodeURIComponent(v);\n            } catch {\n              return v;\n            }\n          }),\n        ];\n      } else {\n        try {\n          return [key, decodeURIComponent(value as string)];\n        } catch {\n          return [key, value];\n        }\n      }\n    })\n  ) as any;\n}\n\nexport function useSearchParams({ global = false } = {}): URLSearchParams {\n  const globalRef = React.useRef(global);\n  if (process.env.NODE_ENV !== 'production') {\n    if (global !== globalRef.current) {\n      console.warn(\n        `Detected change in 'global' option of useSearchParams. This value cannot change between renders`\n      );\n    }\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const params = global ? useGlobalSearchParams() : useLocalSearchParams();\n  const entries = Object.entries(params).flatMap(([key, value]) => {\n    if (global) {\n      if (key === 'params') return [];\n      if (key === 'screen') return [];\n    }\n\n    return Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]];\n  });\n\n  return new ReadOnlyURLSearchParams(entries);\n}\n\nclass ReadOnlyURLSearchParams extends URLSearchParams {\n  set() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  append() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  delete() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}