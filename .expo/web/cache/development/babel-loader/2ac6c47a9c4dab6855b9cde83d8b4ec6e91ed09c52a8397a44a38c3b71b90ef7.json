{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"path\"];\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStateFromPath = void 0;\nconst native_1 = require(\"@react-navigation/native\");\nconst escape_string_regexp_1 = __importDefault(require(\"escape-string-regexp\"));\nconst findFocusedRoute_1 = require(\"./findFocusedRoute\");\nconst expo = __importStar(require(\"./getStateFromPath-forks\"));\nfunction getStateFromPath(path, options) {\n  const {\n    initialRoutes,\n    configs,\n    configWithRegexes\n  } = getConfigResources(options, this?.routeInfo?.segments);\n  const screens = options?.screens;\n  const expoPath = expo.getUrlWithReactNavigationConcessions(path);\n  let remaining = expoPath.nonstandardPathname.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  const prefix = options?.path?.replace(/^\\//, '');\n  if (prefix) {\n    const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n  if (screens === undefined) {\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(expoPath, routes, initialRoutes, [], expoPath.url.hash);\n    }\n    return undefined;\n  }\n  if (remaining === '/') {\n    const match = expo.matchForEmptyPath(configWithRegexes);\n    if (match) {\n      return createNestedStateObject(expoPath, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs, expoPath.url.hash);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configWithRegexes);\n  if (routes !== undefined) {\n    current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nexports.getStateFromPath = getStateFromPath;\nlet cachedConfigResources = [undefined, prepareConfigResources()];\nfunction getConfigResources(options, previousSegments) {\n  cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n  return cachedConfigResources[1];\n}\nfunction prepareConfigResources(options, previousSegments) {\n  if (options) {\n    (0, native_1.validatePathConfig)(options);\n  }\n  const initialRoutes = getInitialRoutes(options);\n  const configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n  checkForDuplicatedConfigs(configs);\n  const configWithRegexes = getConfigsWithRegexes(configs);\n  return {\n    initialRoutes,\n    configs,\n    configWithRegexes\n  };\n}\nfunction getInitialRoutes(options) {\n  const initialRoutes = [];\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  return initialRoutes;\n}\nfunction getNormalizedConfigs(initialRoutes, screens = {}, previousSegments) {\n  return [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n}\nfunction checkForDuplicatedConfigs(configs) {\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n}\nfunction getConfigsWithRegexes(configs) {\n  return configs.map(c => Object.assign({}, c, {\n    regex: expo.configRegExp(c)\n  }));\n}\nconst joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n  const allParams = Object.create(null);\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce((acc, p, index) => {\n        if (!expo.isDynamicPart(p)) {\n          return acc;\n        }\n        acc.pos += 1;\n        const decodedParamSegment = expo.safelyDecodeURIComponent(match[(acc.pos + 1) * 2].replace(/\\/$/, ''));\n        Object.assign(acc.matchedParams, {\n          [p]: Object.assign(acc.matchedParams[p] || {}, {\n            [index]: decodedParamSegment\n          })\n        });\n        return acc;\n      }, {\n        pos: -1,\n        matchedParams: {}\n      });\n      const matchedParams = matchResult.matchedParams || {};\n      routes = config.routeNames.map(name => {\n        const routeConfig = configs.find(c => {\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n        const normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n        const numInitialSegments = routeConfig?.pattern.replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')?.split('/').length;\n        const params = normalizedPath?.split('/').reduce((acc, p, index) => {\n          if (!expo.isDynamicPart(p)) {\n            return acc;\n          }\n          const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n          const value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n          if (value) {\n            const key = expo.replacePart(p);\n            acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          Object.assign(allParams, params);\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  expo.populateParams(routes, allParams);\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = (screen, routeConfig, routeNames = [], initials, parentScreens, parentPattern) => {\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse, config));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse = undefined, config = {}) => {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : (0, escape_string_regexp_1.default)(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return Object.assign({\n    screen,\n    regex,\n    pattern,\n    path,\n    routeNames: [...routeNames],\n    parse\n  }, expo.createConfig(screen, pattern, routeNames, config));\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute,\n          params: route.params\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute,\n          params: route.params\n        }, Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [Object.assign({}, route, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (_ref, routes, initialRoutes, flatConfig, hash) => {\n  let {\n      path\n    } = _ref,\n    expoURL = _objectWithoutPropertiesLoose(_ref, _excluded);\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  const state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n  route.path = expoURL.pathWithoutGroups;\n  const params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n  if (params) {\n    route.params = Object.assign({}, route.params, params);\n  }\n  return state;\n};","map":{"version":3,"names":["native_1","require","escape_string_regexp_1","__importDefault","findFocusedRoute_1","expo","__importStar","getStateFromPath","path","options","initialRoutes","configs","configWithRegexes","getConfigResources","routeInfo","segments","screens","expoPath","getUrlWithReactNavigationConcessions","remaining","nonstandardPathname","replace","endsWith","prefix","normalizedPrefix","startsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","url","hash","match","matchForEmptyPath","routeNames","result","current","remainingPath","matchAgainstConfigs","exports","cachedConfigResources","prepareConfigResources","previousSegments","validatePathConfig","getInitialRoutes","getNormalizedConfigs","checkForDuplicatedConfigs","getConfigsWithRegexes","initialRouteName","push","parentScreens","concat","Object","keys","key","createNormalizedConfigs","appendIsInitial","sort","getRouteConfigSorter","reduce","acc","config","pattern","a","b","intersects","every","it","i","Error","join","assign","c","regex","configRegExp","joinPaths","paths","p","allParams","create","matchResult","index","isDynamicPart","pos","decodedParamSegment","safelyDecodeURIComponent","matchedParams","routeConfig","find","screen","normalizedPath","numInitialSegments","RegExp","default","params","offset","value","getParamValue","replacePart","parse","populateParams","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","createConfig","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","localeCompare","createStateObject","initialRoute","route","isEmpty","state","_ref","expoURL","_objectWithoutPropertiesLoose","_excluded","shift","nestedState","nestedStateIndex","findFocusedRoute","pathWithoutGroups","parseQueryParams"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/fork/getStateFromPath.ts"],"sourcesContent":["import { PathConfigMap, validatePathConfig } from '@react-navigation/native';\nimport type { InitialState, NavigationState, PartialState } from '@react-navigation/routers';\nimport escape from 'escape-string-regexp';\n\nimport { findFocusedRoute } from './findFocusedRoute';\nimport type { ExpoOptions, ExpoRouteConfig } from './getStateFromPath-forks';\nimport * as expo from './getStateFromPath-forks';\nimport { RouterStore } from '../global-state/router-store';\n\nexport type Options<ParamList extends object> = ExpoOptions & {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\nexport type RouteConfig = ExpoRouteConfig & {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\nexport type InitialRouteConfig = {\n  initialRouteName: string;\n  parentScreens: string[];\n};\n\nexport type ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\nexport type ParsedRoute = {\n  name: string;\n  path?: string;\n  params?: Record<string, any> | undefined;\n};\n\ntype ConfigResources = {\n  initialRoutes: InitialRouteConfig[];\n  configs: RouteConfig[];\n  configWithRegexes: RouteConfig[];\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport function getStateFromPath<ParamList extends object>(\n  // START FORK\n  this: RouterStore | undefined | void,\n  // END FORK\n  path: string,\n  options?: Options<ParamList>\n): ResultState | undefined {\n  const { initialRoutes, configs, configWithRegexes } = getConfigResources(\n    options,\n    this?.routeInfo?.segments\n  );\n\n  const screens = options?.screens;\n\n  // START FORK\n  const expoPath = expo.getUrlWithReactNavigationConcessions(path);\n  // END FORK\n\n  // START FORK\n  let remaining = expoPath.nonstandardPathname\n    // let remaining = path\n    // END FORK\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  const prefix = options?.path?.replace(/^\\//, ''); // Remove extra leading slash\n\n  if (prefix) {\n    // Make sure there is a trailing slash\n    const normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n\n    // If the path doesn't start with the prefix, it's not a match\n    if (!remaining.startsWith(normalizedPrefix)) {\n      return undefined;\n    }\n\n    // Remove the prefix from the path\n    remaining = remaining.replace(normalizedPrefix, '');\n  }\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment) => {\n        const name = decodeURIComponent(segment);\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(expoPath, routes, initialRoutes, [], expoPath.url.hash);\n    }\n\n    return undefined;\n  }\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    // START FORK\n    const match = expo.matchForEmptyPath(configWithRegexes);\n    // const match = configs.find(\n    //   (config) =>\n    //     config.path === '' &&\n    //     config.routeNames.every(\n    //       // Make sure that none of the parent configs have a non-empty path defined\n    //       (name) => !configs.find((c) => c.screen === name)?.path\n    //     )\n    // );\n    // END FORK\n\n    if (match) {\n      return createNestedStateObject(\n        expoPath,\n        match.routeNames.map((name) => ({ name })),\n        initialRoutes,\n        configs,\n        expoPath.url.hash\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const { routes, remainingPath } = matchAgainstConfigs(remaining, configWithRegexes);\n\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\n/**\n * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n */\nlet cachedConfigResources: [Options<object> | undefined, ConfigResources] = [\n  undefined,\n  prepareConfigResources(),\n];\n\nfunction getConfigResources<ParamList extends object>(\n  options: Options<ParamList> | undefined,\n  // START FORK\n  previousSegments?: string[]\n  // END FORK\n) {\n  // START FORK - We need to disable this caching as our configs can change based upon the current state\n  // if (cachedConfigResources[0] !== options) {\n  //   console.log(previousSegments);\n  cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n  // }\n  // END FORK FORK\n\n  return cachedConfigResources[1];\n}\n\nfunction prepareConfigResources(options?: Options<object>, previousSegments?: string[]) {\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  const initialRoutes = getInitialRoutes(options);\n\n  const configs = getNormalizedConfigs(initialRoutes, options?.screens, previousSegments);\n\n  checkForDuplicatedConfigs(configs);\n\n  const configWithRegexes = getConfigsWithRegexes(configs);\n\n  return {\n    initialRoutes,\n    configs,\n    configWithRegexes,\n  };\n}\n\nfunction getInitialRoutes(options?: Options<object>) {\n  const initialRoutes: InitialRouteConfig[] = [];\n\n  if (options?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: [],\n    });\n  }\n\n  return initialRoutes;\n}\n\nfunction getNormalizedConfigs(\n  initialRoutes: InitialRouteConfig[],\n  screens: PathConfigMap<object> = {},\n  // START FORK\n  previousSegments?: string[]\n  // END FORK\n) {\n  // Create a normalized configs array which will be easier to use\n  return ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(key, screens as PathConfigMap<object>, [], initialRoutes, [])\n      )\n    )\n    .map(expo.appendIsInitial(initialRoutes))\n    .sort(expo.getRouteConfigSorter(previousSegments));\n  // .sort((a, b) => {\n  //   // Sort config so that:\n  //   // - the most exhaustive ones are always at the beginning\n  //   // - patterns with wildcard are always at the end\n\n  //   // If 2 patterns are same, move the one with less route names up\n  //   // This is an error state, so it's only useful for consistent error messages\n  //   if (a.pattern === b.pattern) {\n  //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n  //   }\n\n  //   // If one of the patterns starts with the other, it's more exhaustive\n  //   // So move it up\n  //   if (a.pattern.startsWith(b.pattern)) {\n  //     return -1;\n  //   }\n\n  //   if (b.pattern.startsWith(a.pattern)) {\n  //     return 1;\n  //   }\n\n  //   const aParts = a.pattern.split('/');\n  //   const bParts = b.pattern.split('/');\n\n  //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n  //     // if b is longer, b get higher priority\n  //     if (aParts[i] == null) {\n  //       return 1;\n  //     }\n  //     // if a is longer, a get higher priority\n  //     if (bParts[i] == null) {\n  //       return -1;\n  //     }\n  //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n  //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n  //     // if both are wildcard we compare next component\n  //     if (aWildCard && bWildCard) {\n  //       continue;\n  //     }\n  //     // if only a is wild card, b get higher priority\n  //     if (aWildCard) {\n  //       return 1;\n  //     }\n  //     // if only b is wild card, a get higher priority\n  //     if (bWildCard) {\n  //       return -1;\n  //     }\n  //   }\n  //   return bParts.length - aParts.length;\n  // });\n}\n\nfunction checkForDuplicatedConfigs(configs: RouteConfig[]) {\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n}\n\nfunction getConfigsWithRegexes(configs: RouteConfig[]) {\n  return configs.map((c) => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    // START FORK\n    // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n    regex: expo.configRegExp(c),\n    // END FORK\n  }));\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routes: ParsedRoute[] | undefined;\n  let remainingPath = remaining;\n\n  // START FORK\n  const allParams = Object.create(null);\n  // END FORK\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      const matchResult = config.pattern?.split('/').reduce<{\n        pos: number; // Position of the current path param segment in the path (e.g in pattern `a/:b/:c`, `:a` is 0 and `:b` is 1)\n        matchedParams: Record<string, Record<string, string>>; // The extracted params\n      }>(\n        (acc, p, index) => {\n          if (!expo.isDynamicPart(p)) {\n            return acc;\n          }\n\n          acc.pos += 1;\n\n          // START FORK\n          const decodedParamSegment = expo.safelyDecodeURIComponent(\n            // const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match![(acc.pos + 1) * 2]\n              // Remove trailing slash\n              .replace(/\\/$/, '')\n          );\n          // END FORK\n\n          Object.assign(acc.matchedParams, {\n            [p]: Object.assign(acc.matchedParams[p] || {}, {\n              [index]: decodedParamSegment,\n            }),\n          });\n\n          return acc;\n        },\n        { pos: -1, matchedParams: {} }\n      );\n\n      const matchedParams = matchResult.matchedParams || {};\n\n      routes = config.routeNames.map((name) => {\n        const routeConfig = configs.find((c) => {\n          // Check matching name AND pattern in case same screen is used at different levels in config\n          return c.screen === name && config.pattern.startsWith(c.pattern);\n        });\n\n        // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n        const normalizedPath = routeConfig?.path.split('/').filter(Boolean).join('/');\n\n        // Get the number of segments in the initial pattern\n        const numInitialSegments = routeConfig?.pattern\n          // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n          .replace(new RegExp(`${escape(normalizedPath!)}$`), '')\n          ?.split('/').length;\n\n        const params = normalizedPath\n          ?.split('/')\n          .reduce<Record<string, unknown>>((acc, p, index) => {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n\n            // Get the real index of the path parameter in the matched path\n            // by offsetting by the number of segments in the initial pattern\n            const offset = numInitialSegments ? numInitialSegments - 1 : 0;\n            // START FORK\n            // const value = matchedParams[p]?.[index + offset];\n            const value = expo.getParamValue(p, matchedParams[p]?.[index + offset]);\n            // END FORK\n\n            if (value) {\n              // START FORK\n              // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n              const key = expo.replacePart(p);\n              // END FORK\n              acc[key] = routeConfig?.parse?.[key] ? routeConfig.parse[key](value as any) : value;\n            }\n\n            return acc;\n          }, {});\n\n        if (params && Object.keys(params).length) {\n          Object.assign(allParams, params);\n          return { name, params };\n        }\n\n        return { name };\n      });\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  // START FORK\n  expo.populateParams(routes, allParams);\n  // END FORK\n\n  return { routes, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  screen: string,\n  routeConfig: PathConfigMap<object>,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentScreens: string[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  parentScreens.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\n          \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n        );\n      }\n\n      pattern =\n        config.exact !== true\n          ? joinPaths(parentPattern || '', config.path || '')\n          : config.path || '';\n\n      configs.push(\n        createConfigItem(screen, routeNames, pattern!, config.path, config.parse, config)\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens,\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          nestedConfig,\n          config.screens as PathConfigMap<object>,\n          routeNames,\n          initials,\n          [...parentScreens],\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse: ParseConfig | undefined = undefined,\n  config: Record<string, any> = {}\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n    // START FORK\n    ...expo.createConfig(screen, pattern, routeNames, config),\n    // END FORK\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  parentScreens: string[],\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  route: ParsedRoute,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute, params: route.params }, route],\n      };\n    } else {\n      return {\n        routes: [route],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [\n          { name: initialRoute, params: route.params },\n          { ...route, state: { routes: [] } },\n        ],\n      };\n    } else {\n      return {\n        routes: [{ ...route, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  { path, ...expoURL }: ReturnType<typeof expo.getUrlWithReactNavigationConcessions>,\n  routes: ParsedRoute[],\n  initialRoutes: InitialRouteConfig[],\n  flatConfig?: RouteConfig[],\n  hash?: string\n) => {\n  let route = routes.shift() as ParsedRoute;\n  const parentScreens: string[] = [];\n\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n  parentScreens.push(route.name);\n\n  const state: InitialState = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as ParsedRoute)) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state as InitialState;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state) as ParsedRoute;\n  // START FORK\n  route.path = expoURL.pathWithoutGroups;\n  // route.path = path;\n  // END FORK\n\n  // START FORK\n  // const params = parseQueryParams(\n  const params = expo.parseQueryParams(\n    path,\n    route,\n    flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined,\n    hash\n  );\n  // END FORK\n\n  // START FORK\n  // expo.handleUrlParams(route, params, hash);\n  if (params) {\n    route.params = { ...route.params, ...params };\n  }\n  // END FORK\n\n  return state;\n};\n\n// START FORK\n// const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n//   const query = path.split('?')[1];\n//   const params = queryString.parse(query);\n\n//   if (parseConfig) {\n//     Object.keys(params).forEach((name) => {\n//       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n//         params[name] = parseConfig[name](params[name] as string);\n//       }\n//     });\n//   }\n\n//   return Object.keys(params).length ? params : undefined;\n// };\n// END FORK\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}