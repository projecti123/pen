{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar _reactJsxDevRuntime = require(\"react/jsx-dev-runtime\");\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"href\", \"replace\", \"push\", \"dismissTo\", \"relativeToDirectory\", \"asChild\", \"rel\", \"target\", \"download\", \"withAnchor\"];\nvar _jsxFileName = \"/Users/tanishakumari/StudySphere/node_modules/expo-router/build/link/Link.js\";\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Link = exports.Redirect = void 0;\nconst react_1 = require(\"react\");\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst href_1 = require(\"./href\");\nconst useLinkToPathProps_1 = __importDefault(require(\"./useLinkToPathProps\"));\nconst hooks_1 = require(\"../hooks\");\nconst useFocusEffect_1 = require(\"../useFocusEffect\");\nconst useLinkHooks_1 = require(\"./useLinkHooks\");\nconst Slot_1 = require(\"../ui/Slot\");\nfunction Redirect({\n  href,\n  relativeToDirectory,\n  withAnchor\n}) {\n  const router = (0, hooks_1.useRouter)();\n  (0, useFocusEffect_1.useFocusEffect)(() => {\n    try {\n      router.replace(href, {\n        relativeToDirectory,\n        withAnchor\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  });\n  return null;\n}\nexports.Redirect = Redirect;\nexports.Link = (0, react_1.forwardRef)(ExpoRouterLink);\nexports.Link.resolveHref = href_1.resolveHref;\nfunction ExpoRouterLink(_ref, ref) {\n  let {\n      href,\n      replace,\n      push,\n      dismissTo,\n      relativeToDirectory,\n      asChild,\n      rel,\n      target,\n      download,\n      withAnchor\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const style = (0, useLinkHooks_1.useInteropClassName)(rest);\n  const hrefAttrs = (0, useLinkHooks_1.useHrefAttrs)({\n    asChild,\n    rel,\n    target,\n    download\n  });\n  const resolvedHref = (0, react_1.useMemo)(() => {\n    if (href == null) {\n      throw new Error('Link: href is required');\n    }\n    return (0, href_1.resolveHref)(href);\n  }, [href]);\n  let event;\n  if (push) event = 'PUSH';\n  if (replace) event = 'REPLACE';\n  if (dismissTo) event = 'POP_TO';\n  const props = (0, useLinkToPathProps_1.default)({\n    href: resolvedHref,\n    event,\n    relativeToDirectory,\n    withAnchor\n  });\n  const onPress = e => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n    props.onPress(e);\n  };\n  const Element = asChild ? Slot_1.Slot : react_native_1.Text;\n  return _reactJsxDevRuntime.jsxDEV(Element, Object.assign({\n    ref: ref\n  }, props, hrefAttrs, rest, {\n    style: style\n  }, react_native_1.Platform.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress\n    }\n  })), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 13\n  }, this);\n}","map":{"version":3,"names":["react_1","require","react_native_1","href_1","useLinkToPathProps_1","__importDefault","hooks_1","useFocusEffect_1","useLinkHooks_1","Slot_1","Redirect","href","relativeToDirectory","withAnchor","router","useRouter","useFocusEffect","replace","error","console","exports","Link","forwardRef","ExpoRouterLink","resolveHref","_ref","ref","push","dismissTo","asChild","rel","target","download","rest","_objectWithoutPropertiesLoose","_excluded","style","useInteropClassName","hrefAttrs","useHrefAttrs","resolvedHref","useMemo","Error","event","props","default","onPress","e","Element","Slot","Text","_reactJsxDevRuntime","jsxDEV","Object","assign","Platform","select","web","onClick","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/link/Link.tsx"],"sourcesContent":["'use client';\n// Fork of @react-navigation/native Link.tsx with `href` and `replace` support added and\n// `to` / `action` support removed.\nimport { PropsWithChildren, forwardRef, useMemo, MouseEvent, ForwardedRef } from 'react';\nimport { Text, GestureResponderEvent, Platform } from 'react-native';\n\nimport { resolveHref } from './href';\nimport useLinkToPathProps from './useLinkToPathProps';\nimport { useRouter } from '../hooks';\nimport { Href } from '../types';\nimport { useFocusEffect } from '../useFocusEffect';\nimport { useInteropClassName, useHrefAttrs, LinkProps, WebAnchorProps } from './useLinkHooks';\nimport { Slot } from '../ui/Slot';\n\nexport interface LinkComponent {\n  (props: PropsWithChildren<LinkProps>): JSX.Element;\n  /** Helper method to resolve a Href object into a string. */\n  resolveHref: (href: Href) => string;\n}\n\nexport type RedirectProps = {\n  /**\n   * The path of the route to navigate to. It can either be:\n   * - **string**: A full path like `/profile/settings` or a relative path like `../settings`.\n   * - **object**: An object with a `pathname` and optional `params`. The `pathname` can be\n   * a full path like `/profile/settings` or a relative path like `../settings`. The\n   * params can be an object of key-value pairs.\n   *\n   * @example\n   * ```tsx Dynamic\n   * import { Redirect } from 'expo-router';\n   *\n   * export default function RedirectToAbout() {\n   *  return (\n   *    <Redirect href=\"/about\">About</Link>\n   *  );\n   *}\n   * ```\n   */\n  href: Href;\n\n  /**\n   * Relative URL references are either relative to the directory or the document.\n   * By default, relative paths are relative to the document.\n   *\n   * @see [Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references).\n   */\n  relativeToDirectory?: boolean;\n\n  /**\n   * Replaces the initial screen with the current route.\n   */\n  withAnchor?: boolean;\n};\n\n/**\n * Redirects to the `href` as soon as the component is mounted.\n *\n * @example\n * ```tsx\n * import { View, Text } from 'react-native';\n * import { Redirect } from 'expo-router';\n *\n * export default function Page() {\n *  const { user } = useAuth();\n *\n *  if (!user) {\n *    return <Redirect href=\"/login\" />;\n *  }\n *\n *  return (\n *    <View>\n *      <Text>Welcome Back!</Text>\n *    </View>\n *  );\n * }\n * ```\n */\nexport function Redirect({ href, relativeToDirectory, withAnchor }: RedirectProps) {\n  const router = useRouter();\n  useFocusEffect(() => {\n    try {\n      router.replace(href, { relativeToDirectory, withAnchor });\n    } catch (error) {\n      console.error(error);\n    }\n  });\n  return null;\n}\n\n/**\n * Component that renders a link using [`href`](#href) to another route.\n * By default, it accepts children and wraps them in a `<Text>` component.\n *\n * Uses an anchor tag (`<a>`) on web and performs a client-side navigation to preserve\n * the state of the website and navigate faster. The web-only attributes such as `target`,\n * `rel`, and `download` are supported and passed to the anchor tag on web. See\n * [`WebAnchorProps`](#webanchorprops) for more details.\n *\n * > **Note**: Client-side navigation works with both single-page apps,\n * and [static-rendering](/router/reference/static-rendering/).\n *\n * @example\n * ```tsx\n * import { Link } from 'expo-router';\n * import { View } from 'react-native';\n *\n * export default function Route() {\n *  return (\n *   <View>\n *    <Link href=\"/about\">About</Link>\n *   </View>\n *  );\n *}\n * ```\n */\nexport const Link = forwardRef(ExpoRouterLink) as unknown as LinkComponent;\n\nLink.resolveHref = resolveHref;\n\nfunction ExpoRouterLink(\n  {\n    href,\n    replace,\n    push,\n    dismissTo,\n    // TODO: This does not prevent default on the anchor tag.\n    relativeToDirectory,\n    asChild,\n    rel,\n    target,\n    download,\n    withAnchor,\n    ...rest\n  }: LinkProps,\n  ref: ForwardedRef<Text>\n) {\n  // Mutate the style prop to add the className on web.\n  const style = useInteropClassName(rest);\n\n  // If not passing asChild, we need to forward the props to the anchor tag using React Native Web's `hrefAttrs`.\n  const hrefAttrs = useHrefAttrs({ asChild, rel, target, download });\n\n  const resolvedHref = useMemo(() => {\n    if (href == null) {\n      throw new Error('Link: href is required');\n    }\n    return resolveHref(href);\n  }, [href]);\n\n  let event;\n  if (push) event = 'PUSH';\n  if (replace) event = 'REPLACE';\n  if (dismissTo) event = 'POP_TO';\n\n  const props = useLinkToPathProps({\n    href: resolvedHref,\n    event,\n    relativeToDirectory,\n    withAnchor,\n  });\n\n  const onPress = (e: MouseEvent<HTMLAnchorElement> | GestureResponderEvent) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n    props.onPress(e);\n  };\n\n  const Element = asChild ? Slot : Text;\n\n  // Avoid using createElement directly, favoring JSX, to allow tools like NativeWind to perform custom JSX handling on native.\n  return (\n    <Element\n      ref={ref}\n      {...props}\n      {...hrefAttrs}\n      {...rest}\n      style={style}\n      {...Platform.select({\n        web: {\n          onClick: onPress,\n        } as any,\n        default: { onPress },\n      })}\n    />\n  );\n}\n\nexport { LinkProps, WebAnchorProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}