{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { mockEarnings } from \"../mocks/user\";\nexport const useEarningsStore = create()(persist(set => ({\n  earnings: {\n    total: 0,\n    withdrawable: 0,\n    history: []\n  },\n  isLoading: false,\n  error: null,\n  fetchEarnings: async () => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      set({\n        earnings: mockEarnings,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : \"Failed to fetch earnings\",\n        isLoading: false\n      });\n    }\n  },\n  requestWithdrawal: async (amount, method) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      if (amount <= 0) {\n        throw new Error(\"Withdrawal amount must be greater than zero\");\n      }\n      await new Promise(resolve => setTimeout(resolve, 1200));\n      const newTransaction = {\n        id: `trx_${Date.now()}`,\n        amount,\n        type: 'withdrawal',\n        status: 'pending',\n        date: new Date().toISOString()\n      };\n      set(state => ({\n        earnings: Object.assign({}, state.earnings, {\n          withdrawable: state.earnings.withdrawable - amount,\n          history: [newTransaction, ...state.earnings.history]\n        }),\n        isLoading: false\n      }));\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : \"Failed to request withdrawal\",\n        isLoading: false\n      });\n    }\n  },\n  addEarning: transaction => {\n    const newTransaction = Object.assign({\n      id: `trx_${Date.now()}`\n    }, transaction, {\n      status: 'completed',\n      date: new Date().toISOString()\n    });\n    set(state => ({\n      earnings: {\n        total: state.earnings.total + transaction.amount,\n        withdrawable: state.earnings.withdrawable + transaction.amount,\n        history: [newTransaction, ...state.earnings.history]\n      }\n    }));\n  }\n}), {\n  name: 'earnings-storage',\n  storage: createJSONStorage(() => AsyncStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","AsyncStorage","mockEarnings","useEarningsStore","set","earnings","total","withdrawable","history","isLoading","error","fetchEarnings","Promise","resolve","setTimeout","Error","message","requestWithdrawal","amount","method","newTransaction","id","Date","now","type","status","date","toISOString","state","Object","assign","addEarning","transaction","name","storage"],"sources":["/Users/tanishakumari/StudySphere/store/earnings-store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Earnings, EarningTransaction } from '@/types';\nimport { mockEarnings } from '@/mocks/user';\n\ninterface EarningsState {\n  earnings: Earnings;\n  isLoading: boolean;\n  error: string | null;\n  \n  fetchEarnings: () => Promise<void>;\n  requestWithdrawal: (amount: number, method: string) => Promise<void>;\n  addEarning: (transaction: Omit<EarningTransaction, 'id' | 'date' | 'status'>) => void;\n}\n\nexport const useEarningsStore = create<EarningsState>()(\n  persist(\n    (set) => ({\n      earnings: {\n        total: 0,\n        withdrawable: 0,\n        history: []\n      },\n      isLoading: false,\n      error: null,\n      \n      fetchEarnings: async () => {\n        set({ isLoading: true, error: null });\n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 800));\n          set({ earnings: mockEarnings, isLoading: false });\n        } catch (error) {\n          set({ error: error instanceof Error ? error.message : \"Failed to fetch earnings\", isLoading: false });\n        }\n      },\n      \n      requestWithdrawal: async (amount, method) => {\n        set({ isLoading: true, error: null });\n        try {\n          // Validate withdrawal amount\n          if (amount <= 0) {\n            throw new Error(\"Withdrawal amount must be greater than zero\");\n          }\n          \n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 1200));\n          \n          const newTransaction: EarningTransaction = {\n            id: `trx_${Date.now()}`,\n            amount,\n            type: 'withdrawal',\n            status: 'pending',\n            date: new Date().toISOString()\n          };\n          \n          set((state) => ({\n            earnings: {\n              ...state.earnings,\n              withdrawable: state.earnings.withdrawable - amount,\n              history: [newTransaction, ...state.earnings.history]\n            },\n            isLoading: false\n          }));\n        } catch (error) {\n          set({ error: error instanceof Error ? error.message : \"Failed to request withdrawal\", isLoading: false });\n        }\n      },\n      \n      addEarning: (transaction) => {\n        const newTransaction: EarningTransaction = {\n          id: `trx_${Date.now()}`,\n          ...transaction,\n          status: 'completed',\n          date: new Date().toISOString()\n        };\n        \n        set((state) => ({\n          earnings: {\n            total: state.earnings.total + transaction.amount,\n            withdrawable: state.earnings.withdrawable + transaction.amount,\n            history: [newTransaction, ...state.earnings.history]\n          }\n        }));\n      }\n    }),\n    {\n      name: 'earnings-storage',\n      storage: createJSONStorage(() => AsyncStorage)\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}