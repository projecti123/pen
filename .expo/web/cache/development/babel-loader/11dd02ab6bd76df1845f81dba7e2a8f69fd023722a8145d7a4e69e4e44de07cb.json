{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appendBaseUrl = exports.getPathDataFromState = exports.getPathFromState = void 0;\nconst queryString = __importStar(require(\"query-string\"));\nconst expo = __importStar(require(\"./getPathFromState-forks\"));\nconst getActiveRoute = state => {\n  const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  return route;\n};\nlet cachedNormalizedConfigs = [undefined, {}];\nfunction getPathFromState(state, options) {\n  return getPathDataFromState(state, options).path;\n}\nexports.getPathFromState = getPathFromState;\nfunction getPathDataFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  if (options) {\n    expo.validatePathConfig(options);\n  }\n  if (cachedNormalizedConfigs[0] !== options?.screens) {\n    cachedNormalizedConfigs = [options?.screens, options?.screens ? createNormalizedConfigs(options.screens) : {}];\n  }\n  const configs = cachedNormalizedConfigs[1];\n  let path = '/';\n  let current = state;\n  const allParams = {};\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index];\n    let pattern;\n    let focusedParams;\n    const focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n    const nestedRouteNames = [];\n    let hasNext = true;\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n        const currentParams = expo.fixCurrentParams(allParams, route, stringify);\n        if (focusedRoute === route) {\n          focusedParams = Object.assign({}, currentParams);\n          pattern?.split('/').filter(p => expo.isDynamicPart(p)).forEach(p => {\n            const name = expo.getParamName(p);\n            if (focusedParams) {\n              delete focusedParams[name];\n            }\n          });\n        }\n      }\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        const screens = currentOptions[route.name].screens;\n        const targetScreen = route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n        const screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n        if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n          route = Object.assign({}, screens[screen], {\n            name: screen,\n            key: screen\n          });\n          currentOptions = screens;\n        } else {\n          hasNext = false;\n        }\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          hasNext = false;\n        }\n      }\n    }\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n    if (currentOptions[route.name] !== undefined) {\n      path += expo.getPathWithConventionsCollapsed(Object.assign({}, options, {\n        pattern,\n        route,\n        params: allParams,\n        initialRouteName: configs[route.name]?.initialRouteName\n      }));\n    } else if (!route.name.startsWith('+')) {\n      path += encodeURIComponent(route.name);\n    }\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (const param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          delete focusedParams[param];\n        }\n      }\n      delete focusedParams['#'];\n      const query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n    current = route.state;\n  }\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  if (options?.path) {\n    path = joinPaths(options.path, path);\n  }\n  path = expo.appendBaseUrl(path);\n  if (allParams['#']) {\n    path += `#${allParams['#']}`;\n  }\n  return {\n    path,\n    params: allParams\n  };\n}\nexports.getPathDataFromState = getPathDataFromState;\nconst joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\nconst createConfigItem = (config, parentPattern) => {\n  if (typeof config === 'string') {\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern\n    };\n  }\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n  const pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens\n  };\n};\nconst createNormalizedConfigs = (options, pattern) => Object.fromEntries(Object.entries(options).map(([name, c]) => {\n  const result = createConfigItem(c, pattern);\n  return [name, result];\n}));\nfunction appendBaseUrl(path, baseUrl = \"\") {\n  if (process.env.NODE_ENV !== 'development') {\n    if (baseUrl) {\n      return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n    }\n  }\n  return path;\n}\nexports.appendBaseUrl = appendBaseUrl;","map":{"version":3,"names":["queryString","__importStar","require","expo","getActiveRoute","state","route","index","routes","length","cachedNormalizedConfigs","undefined","getPathFromState","options","getPathDataFromState","path","exports","Error","validatePathConfig","screens","createNormalizedConfigs","configs","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","currentParams","fixCurrentParams","Object","assign","split","filter","p","isDynamicPart","forEach","getParamName","targetScreen","screen","keys","key","nextRoute","nestedConfig","join","getPathWithConventionsCollapsed","initialRouteName","startsWith","encodeURIComponent","param","query","sort","replace","joinPaths","appendBaseUrl","paths","concat","map","Boolean","createConfigItem","config","parentPattern","exact","fromEntries","entries","c","result","baseUrl","process","env","NODE_ENV"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/fork/getPathFromState.ts"],"sourcesContent":["import { PathConfig, PathConfigMap } from '@react-navigation/native';\nimport type { NavigationState, PartialState, Route } from '@react-navigation/routers';\nimport * as queryString from 'query-string';\n\nimport * as expo from './getPathFromState-forks';\nimport type { ExpoConfigItem, ExpoOptions } from './getPathFromState-forks';\n\n// START FORK\nexport type Options<ParamList extends object> = ExpoOptions & {\n  path?: string;\n  initialRouteName?: string;\n  screens: PathConfigMap<ParamList>;\n};\n// END FORK\n\nexport type State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\nexport type StringifyConfig = Record<string, (value: any) => string>;\n\n// START FORK\ntype ConfigItem = ExpoConfigItem & {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n// END FORK\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\nlet cachedNormalizedConfigs: [PathConfigMap<object> | undefined, Record<string, ConfigItem>] = [\n  undefined,\n  {},\n];\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport function getPathFromState<ParamList extends object>(\n  state: State,\n  options?: Options<ParamList>\n): string {\n  return getPathDataFromState(state, options).path;\n}\n\nexport function getPathDataFromState<ParamList extends object>(\n  state: State,\n  options?: Options<ParamList>\n) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n\n  if (options) {\n    // START FORK\n    expo.validatePathConfig(options);\n    // validatePathConfig(options);\n    // END FORK\n  }\n\n  // Create a normalized configs object which will be easier to use\n  if (cachedNormalizedConfigs[0] !== options?.screens) {\n    cachedNormalizedConfigs = [\n      options?.screens,\n      options?.screens ? createNormalizedConfigs(options.screens) : {},\n    ];\n  }\n  const configs: Record<string, ConfigItem> = cachedNormalizedConfigs[1];\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    const focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    const nestedRouteNames: string[] = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        // START FORK\n        // This mutates allParams\n        const currentParams = expo.fixCurrentParams(allParams, route, stringify);\n\n        // const currentParams = Object.fromEntries(\n        //   Object.entries(route.params).map(([key, value]) => [\n        //     key,\n        //     stringify?.[key] ? stringify[key](value) : String(value),\n        //   ])\n        // );\n\n        // if (pattern) {\n        //   Object.assign(allParams, currentParams);\n        // }\n        // END FORK\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => expo.isDynamicPart(p))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = expo.getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        // START FORK\n        // Expo Router allows you to navigate to a (group) and not specify a target screen\n        // This is different from React Navigation, which requires a target screen\n        // We need to handle this case here, by selecting either the index screen or the first screen of the group\n\n        // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n        // Layout files create a new route config. This only affects groups without layouts that have their screens\n        // hoisted.\n\n        // Example:\n        // - /home/_layout\n        // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n        // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n        // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n        //\n        // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n        // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n        const screens = currentOptions[route.name].screens;\n\n        // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n        // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n        const targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string'\n            ? route.params.screen\n            : 'index';\n\n        // If the target screen is not in the screens object, default to the first screen\n        // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n        // As there is no index screen in the group\n        const screen = screens\n          ? screens[targetScreen]\n            ? targetScreen\n            : Object.keys(screens)[0]\n          : undefined;\n\n        if (screen && screens && currentOptions[route.name].screens?.[screen]) {\n          route = { ...screens[screen], name: screen, key: screen };\n          currentOptions = screens;\n        } else {\n          hasNext = false;\n        }\n        // hasNext = false;\n        // END FORK\n      } else {\n        index =\n          typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      // START FORK\n      path += expo.getPathWithConventionsCollapsed({\n        ...options,\n        pattern,\n        route,\n        params: allParams,\n        initialRouteName: configs[route.name]?.initialRouteName,\n      });\n      // path += pattern\n      //   .split('/')\n      //   .map((p) => {\n      //     const name = getParamName(p);\n\n      //     // We don't know what to show for wildcard patterns\n      //     // Showing the route name seems ok, though whatever we show here will be incorrect\n      //     // Since the page doesn't actually exist\n      //     if (p === '*') {\n      //       return route.name;\n      //     }\n\n      //     // If the path has a pattern for a param, put the param in the path\n      //     if (p.startsWith(':')) {\n      //       const value = allParams[name];\n\n      //       if (value === undefined && p.endsWith('?')) {\n      //         // Optional params without value assigned in route.params should be ignored\n      //         return '';\n      //       }\n\n      //       // Valid characters according to\n      //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n      //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n      //         encodeURIComponent(char)\n      //       );\n      //     }\n\n      //     return encodeURIComponent(p);\n      //   })\n      //   .join('/');\n      // } else {\n    } else if (!route.name.startsWith('+')) {\n      path += encodeURIComponent(route.name);\n    }\n    // END FORK\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (const param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      // START FORK\n      delete focusedParams['#'];\n      // END FORK\n\n      const query = queryString.stringify(focusedParams, { sort: false });\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  // Include the root path if specified\n  if (options?.path) {\n    path = joinPaths(options.path, path);\n  }\n\n  // START FORK\n  path = expo.appendBaseUrl(path);\n  if (allParams['#']) {\n    path += `#${allParams['#']}`;\n  }\n  // END FORK\n\n  // START FORK\n  return { path, params: allParams };\n  // END FORK\n}\n\n// const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  config: PathConfig<object> | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  if (config.exact && config.path === undefined) {\n    throw new Error(\n      \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n    );\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  const pattern =\n    config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  options: PathConfigMap<object>,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  Object.fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(c, pattern);\n\n      return [name, result];\n    })\n  );\n\nexport function appendBaseUrl(\n  path: string,\n  baseUrl: string | undefined = process.env.EXPO_BASE_URL\n) {\n  if (process.env.NODE_ENV !== 'development') {\n    if (baseUrl) {\n      return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n    }\n  }\n  return path;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}