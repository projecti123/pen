{"ast":null,"code":"import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { mockUser } from \"../mocks/user\";\nexport const useAuthStore = create()(persist(set => ({\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  login: async (email, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      if (email && password) {\n        set({\n          user: mockUser,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } else {\n        throw new Error(\"Invalid credentials\");\n      }\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : \"Login failed\",\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  signup: async (name, email, password) => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      if (name && email && password) {\n        const newUser = Object.assign({}, mockUser, {\n          id: `user_${Date.now()}`,\n          name,\n          email,\n          interests: [],\n          subjects: [],\n          level: 1,\n          xp: 0,\n          followers: 0,\n          following: 0,\n          createdAt: new Date().toISOString()\n        });\n        set({\n          user: newUser,\n          isAuthenticated: true,\n          isLoading: false\n        });\n      } else {\n        throw new Error(\"Please fill all required fields\");\n      }\n    } catch (error) {\n      set({\n        error: error instanceof Error ? error.message : \"Signup failed\",\n        isLoading: false\n      });\n      throw error;\n    }\n  },\n  logout: () => {\n    set({\n      user: null,\n      isAuthenticated: false\n    });\n  },\n  updateUser: userData => {\n    set(state => ({\n      user: state.user ? Object.assign({}, state.user, userData) : null\n    }));\n  },\n  setInterests: interests => {\n    set(state => ({\n      user: state.user ? Object.assign({}, state.user, {\n        interests\n      }) : null\n    }));\n  },\n  setSubjects: subjects => {\n    set(state => ({\n      user: state.user ? Object.assign({}, state.user, {\n        subjects\n      }) : null\n    }));\n  }\n}), {\n  name: 'auth-storage',\n  storage: createJSONStorage(() => AsyncStorage)\n}));","map":{"version":3,"names":["create","persist","createJSONStorage","AsyncStorage","mockUser","useAuthStore","set","user","isAuthenticated","isLoading","error","login","email","password","Promise","resolve","setTimeout","Error","message","signup","name","newUser","Object","assign","id","Date","now","interests","subjects","level","xp","followers","following","createdAt","toISOString","logout","updateUser","userData","state","setInterests","setSubjects","storage"],"sources":["/Users/tanishakumari/StudySphere/store/auth-store.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { User } from '@/types';\nimport { mockUser } from '@/mocks/user';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  signup: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n  updateUser: (userData: Partial<User>) => void;\n  setInterests: (interests: string[]) => void;\n  setSubjects: (subjects: string[]) => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set) => ({\n      user: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n      \n      login: async (email, password) => {\n        set({ isLoading: true, error: null });\n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // For demo purposes, we'll use mock data\n          if (email && password) {\n            set({ user: mockUser, isAuthenticated: true, isLoading: false });\n          } else {\n            throw new Error(\"Invalid credentials\");\n          }\n        } catch (error) {\n          set({ error: error instanceof Error ? error.message : \"Login failed\", isLoading: false });\n          throw error; // Re-throw to handle in component\n        }\n      },\n      \n      signup: async (name, email, password) => {\n        set({ isLoading: true, error: null });\n        try {\n          // Simulate API call\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // For demo purposes, we'll create a new user based on mock\n          if (name && email && password) {\n            const newUser = {\n              ...mockUser,\n              id: `user_${Date.now()}`,\n              name,\n              email,\n              interests: [],\n              subjects: [],\n              level: 1,\n              xp: 0,\n              followers: 0,\n              following: 0,\n              createdAt: new Date().toISOString()\n            };\n            set({ user: newUser, isAuthenticated: true, isLoading: false });\n          } else {\n            throw new Error(\"Please fill all required fields\");\n          }\n        } catch (error) {\n          set({ error: error instanceof Error ? error.message : \"Signup failed\", isLoading: false });\n          throw error; // Re-throw to handle in component\n        }\n      },\n      \n      logout: () => {\n        set({ user: null, isAuthenticated: false });\n      },\n      \n      updateUser: (userData) => {\n        set((state) => ({\n          user: state.user ? { ...state.user, ...userData } : null\n        }));\n      },\n      \n      setInterests: (interests) => {\n        set((state) => ({\n          user: state.user ? { ...state.user, interests } : null\n        }));\n      },\n      \n      setSubjects: (subjects) => {\n        set((state) => ({\n          user: state.user ? { ...state.user, subjects } : null\n        }));\n      }\n    }),\n    {\n      name: 'auth-storage',\n      storage: createJSONStorage(() => AsyncStorage)\n    }\n  )\n);"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}