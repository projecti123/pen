{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathFromState = exports.getStateFromPath = exports.addEventListener = exports.getRootURL = exports.getInitialURL = void 0;\nconst Linking = __importStar(require(\"expo-linking\"));\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst extractPathFromURL_1 = require(\"../fork/extractPathFromURL\");\nconst getPathFromState_1 = require(\"../fork/getPathFromState\");\nObject.defineProperty(exports, \"getPathFromState\", {\n  enumerable: true,\n  get: function () {\n    return getPathFromState_1.getPathFromState;\n  }\n});\nconst getStateFromPath_1 = require(\"../fork/getStateFromPath\");\nObject.defineProperty(exports, \"getStateFromPath\", {\n  enumerable: true,\n  get: function () {\n    return getStateFromPath_1.getStateFromPath;\n  }\n});\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\nfunction getInitialURLWithTimeout() {\n  return Promise.race([Linking.getInitialURL(), new Promise(resolve => setTimeout(() => resolve(null), 150))]);\n}\nfunction getInitialURL() {\n  if (react_native_1.Platform.OS === 'web') {\n    if (false) {\n      return '';\n    } else if (window.location?.href) {\n      return window.location.href;\n    }\n  }\n  return getInitialURLWithTimeout().then(url => parseExpoGoUrlFromListener(url) ?? getRootURL());\n}\nexports.getInitialURL = getInitialURL;\nlet _rootURL;\nfunction getRootURL() {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\nexports.getRootURL = getRootURL;\nfunction parseExpoGoUrlFromListener(url) {\n  if (!url || !isExpoGo) {\n    return url;\n  }\n  const {\n    pathname,\n    queryString\n  } = (0, extractPathFromURL_1.parsePathAndParamsFromExpoGoLink)(url);\n  if (!pathname || pathname === '/') {\n    return getRootURL() + queryString;\n  }\n  return url;\n}\nfunction addEventListener(nativeLinking) {\n  return listener => {\n    let callback;\n    const legacySubscription = nativeLinking?.legacy_subscribe?.(listener);\n    if (isExpoGo) {\n      callback = async ({\n        url\n      }) => {\n        url = parseExpoGoUrlFromListener(url);\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({\n            path: url,\n            initial: false\n          });\n        }\n        listener(url);\n      };\n    } else {\n      callback = async ({\n        url\n      }) => {\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({\n            path: url,\n            initial: false\n          });\n        }\n        listener(url);\n      };\n    }\n    const subscription = Linking.addEventListener('url', callback);\n    return () => {\n      subscription?.remove?.();\n      legacySubscription?.();\n    };\n  };\n}\nexports.addEventListener = addEventListener;","map":{"version":3,"names":["Linking","__importStar","require","react_native_1","extractPathFromURL_1","getPathFromState_1","Object","defineProperty","exports","enumerable","get","getPathFromState","getStateFromPath_1","getStateFromPath","isExpoGo","expo","globalThis","modules","ExpoGo","getInitialURLWithTimeout","Promise","race","getInitialURL","resolve","setTimeout","Platform","OS","window","location","href","then","url","parseExpoGoUrlFromListener","getRootURL","_rootURL","undefined","createURL","pathname","queryString","parsePathAndParamsFromExpoGoLink","addEventListener","nativeLinking","listener","callback","legacySubscription","legacy_subscribe","redirectSystemPath","path","initial","subscription","remove"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'react-native';\n\nimport { parsePathAndParamsFromExpoGoLink } from '../fork/extractPathFromURL';\nimport { getPathFromState } from '../fork/getPathFromState';\nimport { getStateFromPath } from '../fork/getStateFromPath';\nimport { NativeIntent } from '../types';\n\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\nfunction getInitialURLWithTimeout(): Promise<string | null> {\n  return Promise.race([\n    Linking.getInitialURL(),\n    new Promise<null>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(null), 150)\n    ),\n  ]);\n}\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport function getInitialURL(): ReturnType<\n  NonNullable<LinkingOptions<Record<string, unknown>>['getInitialURL']>\n> {\n  if (Platform.OS === 'web') {\n    if (typeof window === 'undefined') {\n      return '';\n    } else if (window.location?.href) {\n      return window.location.href;\n    }\n  }\n\n  return getInitialURLWithTimeout().then(\n    (url) =>\n      parseExpoGoUrlFromListener(url) ??\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      getRootURL()\n  );\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\n\n// Expo Go is weird and requires the root path to be `/--/`\nfunction parseExpoGoUrlFromListener<T extends string | null>(url: T): T {\n  if (!url || !isExpoGo) {\n    return url;\n  }\n  const { pathname, queryString } = parsePathAndParamsFromExpoGoLink(url);\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  if (!pathname || pathname === '/') {\n    return (getRootURL() + queryString) as T;\n  }\n  return url;\n}\n\nexport function addEventListener(nativeLinking?: NativeIntent) {\n  return (listener: (url: string) => void) => {\n    let callback: (({ url }: { url: string }) => void) | undefined;\n\n    const legacySubscription = nativeLinking?.legacy_subscribe?.(listener);\n\n    if (isExpoGo) {\n      // This extra work is only done in the Expo Go app.\n      callback = async ({ url }) => {\n        url = parseExpoGoUrlFromListener(url);\n\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({ path: url, initial: false });\n        }\n\n        listener(url);\n      };\n    } else {\n      callback = async ({ url }) => {\n        if (url && nativeLinking?.redirectSystemPath) {\n          url = await nativeLinking.redirectSystemPath({ path: url, initial: false });\n        }\n        listener(url);\n      };\n    }\n\n    const subscription = Linking.addEventListener('url', callback);\n\n    return () => {\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      subscription?.remove?.();\n      legacySubscription?.();\n    };\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}