{"ast":null,"code":"export function formatProjectFilePath(projectRoot, file) {\n  if (file == null) {\n    return '<unknown>';\n  }\n  return pathRelativeToPath(file.replace(/\\\\/g, '/'), projectRoot.replace(/\\\\/g, '/')).replace(/\\?.*$/, '');\n}\nfunction pathRelativeToPath(path, relativeTo, sep = '/') {\n  const relativeToParts = relativeTo.split(sep);\n  const pathParts = path.split(sep);\n  let i = 0;\n  while (i < relativeToParts.length && i < pathParts.length) {\n    if (relativeToParts[i] !== pathParts[i]) {\n      break;\n    }\n    i++;\n  }\n  return pathParts.slice(i).join(sep);\n}\nexport function getStackFormattedLocation(projectRoot, frame) {\n  const column = frame.column != null && parseInt(String(frame.column), 10);\n  const location = formatProjectFilePath(projectRoot, frame.file) + (frame.lineNumber != null ? ':' + frame.lineNumber + (column && !isNaN(column) ? ':' + (column + 1) : '') : '');\n  return location;\n}","map":{"version":3,"names":["formatProjectFilePath","projectRoot","file","pathRelativeToPath","replace","path","relativeTo","sep","relativeToParts","split","pathParts","i","length","slice","join","getStackFormattedLocation","frame","column","parseInt","String","location","lineNumber","isNaN"],"sources":["/Users/tanishakumari/StudySphere/node_modules/@expo/metro-runtime/src/error-overlay/formatProjectFilePath.ts"],"sourcesContent":["import type { StackFrame } from 'stacktrace-parser';\n\nexport type MetroStackFrame = StackFrame & { collapse?: boolean };\n\nexport function formatProjectFilePath(projectRoot: string, file?: string | null): string {\n  if (file == null) {\n    return '<unknown>';\n  }\n\n  return pathRelativeToPath(file.replace(/\\\\/g, '/'), projectRoot.replace(/\\\\/g, '/')).replace(\n    /\\?.*$/,\n    ''\n  );\n}\n\nfunction pathRelativeToPath(path: string, relativeTo: string, sep = '/') {\n  const relativeToParts = relativeTo.split(sep);\n  const pathParts = path.split(sep);\n  let i = 0;\n  while (i < relativeToParts.length && i < pathParts.length) {\n    if (relativeToParts[i] !== pathParts[i]) {\n      break;\n    }\n    i++;\n  }\n  return pathParts.slice(i).join(sep);\n}\n\nexport function getStackFormattedLocation(projectRoot: string, frame: MetroStackFrame) {\n  const column = frame.column != null && parseInt(String(frame.column), 10);\n  const location =\n    formatProjectFilePath(projectRoot, frame.file) +\n    (frame.lineNumber != null\n      ? ':' + frame.lineNumber + (column && !isNaN(column) ? ':' + (column + 1) : '')\n      : '');\n\n  return location;\n}\n"],"mappings":"AAIA,OAAO,SAASA,qBAAqBA,CAACC,WAAmB,EAAEC,IAAoB,EAAU;EACvF,IAAIA,IAAI,IAAI,IAAI,EAAE;IAChB,OAAO,WAAW;EACpB;EAEA,OAAOC,kBAAkB,CAACD,IAAI,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAEH,WAAW,CAACG,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAACA,OAAO,CAC1F,OAAO,EACP,EACF,CAAC;AACH;AAEA,SAASD,kBAAkBA,CAACE,IAAY,EAAEC,UAAkB,EAAEC,GAAG,GAAG,GAAG,EAAE;EACvE,MAAMC,eAAe,GAAGF,UAAU,CAACG,KAAK,CAACF,GAAG,CAAC;EAC7C,MAAMG,SAAS,GAAGL,IAAI,CAACI,KAAK,CAACF,GAAG,CAAC;EACjC,IAAII,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGH,eAAe,CAACI,MAAM,IAAID,CAAC,GAAGD,SAAS,CAACE,MAAM,EAAE;IACzD,IAAIJ,eAAe,CAACG,CAAC,CAAC,KAAKD,SAAS,CAACC,CAAC,CAAC,EAAE;MACvC;IACF;IACAA,CAAC,EAAE;EACL;EACA,OAAOD,SAAS,CAACG,KAAK,CAACF,CAAC,CAAC,CAACG,IAAI,CAACP,GAAG,CAAC;AACrC;AAEA,OAAO,SAASQ,yBAAyBA,CAACd,WAAmB,EAAEe,KAAsB,EAAE;EACrF,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAM,IAAI,IAAI,IAAIC,QAAQ,CAACC,MAAM,CAACH,KAAK,CAACC,MAAM,CAAC,EAAE,EAAE,CAAC;EACzE,MAAMG,QAAQ,GACZpB,qBAAqB,CAACC,WAAW,EAAEe,KAAK,CAACd,IAAI,CAAC,IAC7Cc,KAAK,CAACK,UAAU,IAAI,IAAI,GACrB,GAAG,GAAGL,KAAK,CAACK,UAAU,IAAIJ,MAAM,IAAI,CAACK,KAAK,CAACL,MAAM,CAAC,GAAG,GAAG,IAAIA,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAC7E,EAAE,CAAC;EAET,OAAOG,QAAQ;AACjB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}