{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveHrefStringWithSegments = exports.resolveHref = void 0;\nconst resolveHref = href => {\n  if (typeof href === 'string') {\n    return (0, exports.resolveHref)({\n      pathname: href\n    });\n  }\n  const path = href.pathname ?? '';\n  if (!href?.params) {\n    return path;\n  }\n  const {\n    pathname,\n    params\n  } = createQualifiedPathname(path, Object.assign({}, href.params));\n  const paramsString = createQueryParams(params);\n  return pathname + (paramsString ? `?${paramsString}` : '');\n};\nexports.resolveHref = resolveHref;\nfunction resolveHrefStringWithSegments(href, {\n  segments = [],\n  params = {}\n} = {}, {\n  relativeToDirectory\n} = {}) {\n  if (href.startsWith('.')) {\n    let base = segments?.map(segment => {\n      if (!segment.startsWith('[')) return segment;\n      if (segment.startsWith('[...')) {\n        segment = segment.slice(4, -1);\n        const param = params[segment];\n        if (Array.isArray(param)) {\n          return param.join('/');\n        } else {\n          return param?.split(',')?.join('/') ?? '';\n        }\n      } else {\n        segment = segment.slice(1, -1);\n        return params[segment];\n      }\n    }).filter(Boolean).join('/') ?? '/';\n    if (relativeToDirectory) {\n      base = `${base}/`;\n    }\n    const url = new URL(href, `http://hostname/${base}`);\n    href = `${url.pathname}${url.search}`;\n  }\n  return href;\n}\nexports.resolveHrefStringWithSegments = resolveHrefStringWithSegments;\nfunction createQualifiedPathname(pathname, params) {\n  for (const [key, value = ''] of Object.entries(params)) {\n    const dynamicKey = `[${key}]`;\n    const deepDynamicKey = `[...${key}]`;\n    if (pathname.includes(dynamicKey)) {\n      pathname = pathname.replace(dynamicKey, encodeParam(value));\n    } else if (pathname.includes(deepDynamicKey)) {\n      pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n    } else {\n      continue;\n    }\n    delete params[key];\n  }\n  return {\n    pathname,\n    params\n  };\n}\nfunction encodeParam(param) {\n  if (Array.isArray(param)) {\n    return param.map(p => encodeParam(p)).join('/');\n  }\n  return encodeURIComponent(param.toString());\n}\nfunction createQueryParams(params) {\n  return Object.entries(params).filter(([, value]) => value != null).map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`).join('&');\n}","map":{"version":3,"names":["resolveHref","href","exports","pathname","path","params","createQualifiedPathname","Object","assign","paramsString","createQueryParams","resolveHrefStringWithSegments","segments","relativeToDirectory","startsWith","base","map","segment","slice","param","Array","isArray","join","split","filter","Boolean","url","URL","search","key","value","entries","dynamicKey","deepDynamicKey","includes","replace","encodeParam","p","encodeURIComponent","toString"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/link/href.ts"],"sourcesContent":["import { UrlObject } from '../LocationProvider';\nimport { LinkToOptions } from '../global-state/routing';\nimport { Href } from '../types';\n\n/** Resolve an href object into a fully qualified, relative href. */\nexport const resolveHref = (href: Href): string => {\n  if (typeof href === 'string') {\n    return resolveHref({ pathname: href });\n  }\n  const path = href.pathname ?? '';\n  if (!href?.params) {\n    return path;\n  }\n  const { pathname, params } = createQualifiedPathname(path, {\n    ...href.params,\n  });\n  const paramsString = createQueryParams(params);\n  return pathname + (paramsString ? `?${paramsString}` : '');\n};\n\nexport function resolveHrefStringWithSegments(\n  href: string,\n  { segments = [], params = {} }: Partial<UrlObject> = {},\n  { relativeToDirectory }: LinkToOptions = {}\n) {\n  if (href.startsWith('.')) {\n    // Resolve base path by merging the current segments with the params\n    let base =\n      segments\n        ?.map((segment) => {\n          if (!segment.startsWith('[')) return segment;\n\n          if (segment.startsWith('[...')) {\n            segment = segment.slice(4, -1);\n            const param = params[segment];\n            if (Array.isArray(param)) {\n              return param.join('/');\n            } else {\n              return param?.split(',')?.join('/') ?? '';\n            }\n          } else {\n            segment = segment.slice(1, -1);\n            return params[segment];\n          }\n        })\n        .filter(Boolean)\n        .join('/') ?? '/';\n\n    if (relativeToDirectory) {\n      base = `${base}/`;\n    }\n\n    const url = new URL(href, `http://hostname/${base}`);\n\n    href = `${url.pathname}${url.search}`;\n  }\n\n  return href;\n}\n\nfunction createQualifiedPathname(\n  pathname: string,\n  params: Record<string, any>\n): { pathname: string; params: any } {\n  for (const [key, value = ''] of Object.entries(params)) {\n    const dynamicKey = `[${key}]`;\n    const deepDynamicKey = `[...${key}]`;\n    if (pathname.includes(dynamicKey)) {\n      pathname = pathname.replace(dynamicKey, encodeParam(value));\n    } else if (pathname.includes(deepDynamicKey)) {\n      pathname = pathname.replace(deepDynamicKey, encodeParam(value));\n    } else {\n      continue;\n    }\n\n    delete params[key];\n  }\n  return { pathname, params };\n}\n\nfunction encodeParam(param: any): string {\n  if (Array.isArray(param)) {\n    return param.map((p) => encodeParam(p)).join('/');\n  }\n\n  return encodeURIComponent(param.toString());\n}\n\nfunction createQueryParams(params: Record<string, any>): string {\n  return (\n    Object.entries(params)\n      // Allow nullish params\n      .filter(([, value]) => value != null)\n      .map(([key, value]) => `${key}=${encodeURIComponent(value.toString())}`)\n      .join('&')\n  );\n}\n"],"mappings":";;;;;;AAKO,MAAMA,WAAW,GAAIC,IAAU,IAAY;EAChD,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO,IAAAC,OAAA,CAAAF,WAAW,EAAC;MAAEG,QAAQ,EAAEF;IAAI,CAAE,CAAC;;EAExC,MAAMG,IAAI,GAAGH,IAAI,CAACE,QAAQ,IAAI,EAAE;EAChC,IAAI,CAACF,IAAI,EAAEI,MAAM,EAAE;IACjB,OAAOD,IAAI;;EAEb,MAAM;IAAED,QAAQ;IAAEE;EAAM,CAAE,GAAGC,uBAAuB,CAACF,IAAI,EAAAG,MAAA,CAAAC,MAAA,KACpDP,IAAI,CAACI,MAAM,CACf,CAAC;EACF,MAAMI,YAAY,GAAGC,iBAAiB,CAACL,MAAM,CAAC;EAC9C,OAAOF,QAAQ,IAAIM,YAAY,GAAG,IAAIA,YAAY,EAAE,GAAG,EAAE,CAAC;AAC5D,CAAC;AAbYP,OAAA,CAAAF,WAAW,GAAAA,WAAA;AAexB,SAAgBW,6BAA6BA,CAC3CV,IAAY,EACZ;EAAEW,QAAQ,GAAG,EAAE;EAAEP,MAAM,GAAG;AAAE,IAAyB,EAAE,EACvD;EAAEQ;AAAmB,IAAoB,EAAE;EAE3C,IAAIZ,IAAI,CAACa,UAAU,CAAC,GAAG,CAAC,EAAE;IAExB,IAAIC,IAAI,GACNH,QAAQ,EACJI,GAAG,CAAEC,OAAO,IAAI;MAChB,IAAI,CAACA,OAAO,CAACH,UAAU,CAAC,GAAG,CAAC,EAAE,OAAOG,OAAO;MAE5C,IAAIA,OAAO,CAACH,UAAU,CAAC,MAAM,CAAC,EAAE;QAC9BG,OAAO,GAAGA,OAAO,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,MAAMC,KAAK,GAAGd,MAAM,CAACY,OAAO,CAAC;QAC7B,IAAIG,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;UACxB,OAAOA,KAAK,CAACG,IAAI,CAAC,GAAG,CAAC;SACvB,MAAM;UACL,OAAOH,KAAK,EAAEI,KAAK,CAAC,GAAG,CAAC,EAAED,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;;OAE5C,MAAM;QACLL,OAAO,GAAGA,OAAO,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,OAAOb,MAAM,CAACY,OAAO,CAAC;;IAE1B,CAAC,CAAC,CACDO,MAAM,CAACC,OAAO,CAAC,CACfH,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG;IAErB,IAAIT,mBAAmB,EAAE;MACvBE,IAAI,GAAG,GAAGA,IAAI,GAAG;;IAGnB,MAAMW,GAAG,GAAG,IAAIC,GAAG,CAAC1B,IAAI,EAAE,mBAAmBc,IAAI,EAAE,CAAC;IAEpDd,IAAI,GAAG,GAAGyB,GAAG,CAACvB,QAAQ,GAAGuB,GAAG,CAACE,MAAM,EAAE;;EAGvC,OAAO3B,IAAI;AACb;AAtCAC,OAAA,CAAAS,6BAAA,GAAAA,6BAAA;AAwCA,SAASL,uBAAuBA,CAC9BH,QAAgB,EAChBE,MAA2B;EAE3B,KAAK,MAAM,CAACwB,GAAG,EAAEC,KAAK,GAAG,EAAE,CAAC,IAAIvB,MAAM,CAACwB,OAAO,CAAC1B,MAAM,CAAC,EAAE;IACtD,MAAM2B,UAAU,GAAG,IAAIH,GAAG,GAAG;IAC7B,MAAMI,cAAc,GAAG,OAAOJ,GAAG,GAAG;IACpC,IAAI1B,QAAQ,CAAC+B,QAAQ,CAACF,UAAU,CAAC,EAAE;MACjC7B,QAAQ,GAAGA,QAAQ,CAACgC,OAAO,CAACH,UAAU,EAAEI,WAAW,CAACN,KAAK,CAAC,CAAC;KAC5D,MAAM,IAAI3B,QAAQ,CAAC+B,QAAQ,CAACD,cAAc,CAAC,EAAE;MAC5C9B,QAAQ,GAAGA,QAAQ,CAACgC,OAAO,CAACF,cAAc,EAAEG,WAAW,CAACN,KAAK,CAAC,CAAC;KAChE,MAAM;MACL;;IAGF,OAAOzB,MAAM,CAACwB,GAAG,CAAC;;EAEpB,OAAO;IAAE1B,QAAQ;IAAEE;EAAM,CAAE;AAC7B;AAEA,SAAS+B,WAAWA,CAACjB,KAAU;EAC7B,IAAIC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;IACxB,OAAOA,KAAK,CAACH,GAAG,CAAEqB,CAAC,IAAKD,WAAW,CAACC,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,GAAG,CAAC;;EAGnD,OAAOgB,kBAAkB,CAACnB,KAAK,CAACoB,QAAQ,EAAE,CAAC;AAC7C;AAEA,SAAS7B,iBAAiBA,CAACL,MAA2B;EACpD,OACEE,MAAM,CAACwB,OAAO,CAAC1B,MAAM,CAAC,CAEnBmB,MAAM,CAAC,CAAC,GAAGM,KAAK,CAAC,KAAKA,KAAK,IAAI,IAAI,CAAC,CACpCd,GAAG,CAAC,CAAC,CAACa,GAAG,EAAEC,KAAK,CAAC,KAAK,GAAGD,GAAG,IAAIS,kBAAkB,CAACR,KAAK,CAACS,QAAQ,EAAE,CAAC,EAAE,CAAC,CACvEjB,IAAI,CAAC,GAAG,CAAC;AAEhB","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}