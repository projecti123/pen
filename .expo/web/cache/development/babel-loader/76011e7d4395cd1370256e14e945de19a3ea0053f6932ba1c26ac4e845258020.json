{"ast":null,"code":"'use client';\n\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNavigation = void 0;\nconst native_1 = require(\"@react-navigation/native\");\nconst react_1 = __importDefault(require(\"react\"));\nconst router_store_1 = require(\"./global-state/router-store\");\nconst hooks_1 = require(\"./hooks\");\nconst href_1 = require(\"./link/href\");\nfunction useNavigation(parent) {\n  let navigation = (0, native_1.useNavigation)();\n  const initialNavigation = navigation;\n  const segments = (0, hooks_1.useSegments)();\n  const targetNavigatorContextKey = react_1.default.useMemo(() => {\n    if (!parent) {\n      return;\n    }\n    if (typeof parent === 'object') {\n      parent = (0, href_1.resolveHref)(parent);\n    }\n    if (parent === '/') {\n      return '';\n    }\n    let state = router_store_1.store.getStateFromPath(parent.startsWith('../') ? segments.join('/') : parent);\n    let contextKey = '';\n    const names = [];\n    while (state) {\n      const routes = state.routes;\n      const route = routes[state.index ?? routes.length - 1];\n      if (route.state) {\n        contextKey = `${contextKey}/${route.name}`;\n        names.push(route.name);\n        if (parent === contextKey) {\n          break;\n        }\n        state = route.state;\n      } else {\n        break;\n      }\n    }\n    if (parent.startsWith('../')) {\n      const parentSegments = parent.split('/').filter(Boolean);\n      for (const segment of parentSegments) {\n        if (segment === '..') {\n          names.pop();\n        } else {\n          throw new Error(\"Relative parent paths may only contain '..' and cannot contain other segments\");\n        }\n      }\n      contextKey = names.length > 0 ? `/${names.join('/')}` : '';\n    }\n    return contextKey;\n  }, [segments, parent]);\n  if (targetNavigatorContextKey !== undefined) {\n    navigation = navigation.getParent(targetNavigatorContextKey);\n  }\n  if (!navigation) {\n    const ids = [];\n    navigation = initialNavigation;\n    while (navigation) {\n      ids.push(navigation.getId() || '/');\n      navigation = navigation.getParent();\n    }\n    throw new Error(`Could not find parent navigation with route \"${parent}\". Available routes are: '${ids.join(\"', '\")}'`);\n  }\n  return navigation;\n}\nexports.useNavigation = useNavigation;","map":{"version":3,"names":["native_1","require","react_1","__importDefault","router_store_1","hooks_1","href_1","useNavigation","parent","navigation","initialNavigation","segments","useSegments","targetNavigatorContextKey","default","useMemo","resolveHref","state","store","getStateFromPath","startsWith","join","contextKey","names","routes","route","index","length","name","push","parentSegments","split","filter","Boolean","segment","pop","Error","undefined","getParent","ids","getId","exports"],"sources":["/Users/tanishakumari/StudySphere/node_modules/expo-router/src/useNavigation.ts"],"sourcesContent":["'use client';\nimport {\n  useNavigation as useUpstreamNavigation,\n  NavigationProp,\n  NavigationState,\n} from '@react-navigation/native';\nimport React from 'react';\n\nimport { store } from './global-state/router-store';\nimport { useSegments } from './hooks';\nimport { resolveHref } from './link/href';\nimport { Href } from './types';\n\n/**\n * Returns the underlying React Navigation [`navigation` prop](https://reactnavigation.org/docs/navigation-prop)\n * to imperatively access layout-specific functionality like `navigation.openDrawer()` in a\n * [Drawer](/router/advanced/drawer/) layout.\n *\n * @example\n * ```tsx app/index.tsx\n * import { useNavigation } from 'expo-router';\n *\n * export default function Route() {\n *   // Access the current navigation object for the current route.\n *   const navigation = useNavigation();\n *\n *   return (\n *     <View>\n *       <Text onPress={() => {\n *         // Open the drawer view.\n *         navigation.openDrawer();\n *       }}>\n *         Open Drawer\n *       </Text>\n *     </View>\n *   );\n * }\n * ```\n *\n * When using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route.\n * For example, `/menu/_layout.tsx` is nested inside `/app/orders/`, you can use `useNavigation('/orders/menu/')`.\n *\n * @example\n * ```tsx app/orders/menu/index.tsx\n * import { useNavigation } from 'expo-router';\n *\n * export default function MenuRoute() {\n *   const rootLayout = useNavigation('/');\n *   const ordersLayout = useNavigation('/orders');\n *\n *   // Same as the default results of `useNavigation()` when invoked in this route.\n *   const parentLayout = useNavigation('/orders/menu');\n * }\n * ```\n *\n * If you attempt to access a layout that doesn't exist, an error such as\n * `Could not find parent navigation with route \"/non-existent\"` is thrown.\n *\n *\n * @param parent Provide an absolute path such as `/(root)` to the parent route or a relative path like `../../` to the parent route.\n * @returns The navigation object for the current route.\n *\n * @see React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-prop/#navigator-dependent-functions)\n * for more information.\n */\nexport function useNavigation<\n  T = Omit<NavigationProp<ReactNavigation.RootParamList>, 'getState'> & {\n    getState(): NavigationState | undefined;\n  },\n>(parent?: string | Href): T {\n  let navigation = useUpstreamNavigation<any>();\n  const initialNavigation = navigation;\n  const segments = useSegments();\n\n  const targetNavigatorContextKey = React.useMemo(() => {\n    if (!parent) {\n      return;\n    }\n\n    if (typeof parent === 'object') {\n      parent = resolveHref(parent);\n    }\n\n    if (parent === '/') {\n      return '';\n    }\n\n    let state = store.getStateFromPath(parent.startsWith('../') ? segments.join('/') : parent);\n\n    // Reconstruct the context key from the state\n    let contextKey = '';\n    const names: string[] = [];\n\n    while (state) {\n      const routes = state.routes;\n      const route = routes[state.index ?? routes.length - 1];\n\n      if (route.state) {\n        contextKey = `${contextKey}/${route.name}`;\n        names.push(route.name);\n\n        if (parent === contextKey) {\n          break;\n        }\n\n        state = route.state;\n      } else {\n        break;\n      }\n    }\n\n    if (parent.startsWith('../')) {\n      const parentSegments = parent.split('/').filter(Boolean);\n\n      for (const segment of parentSegments) {\n        if (segment === '..') {\n          names.pop();\n        } else {\n          throw new Error(\n            \"Relative parent paths may only contain '..' and cannot contain other segments\"\n          );\n        }\n      }\n\n      contextKey = names.length > 0 ? `/${names.join('/')}` : '';\n    }\n\n    return contextKey;\n  }, [segments, parent]);\n\n  if (targetNavigatorContextKey !== undefined) {\n    navigation = navigation.getParent(targetNavigatorContextKey as any);\n  }\n\n  if (!navigation) {\n    const ids: (string | undefined)[] = [];\n\n    navigation = initialNavigation;\n\n    while (navigation) {\n      ids.push(navigation.getId() || '/');\n      navigation = navigation.getParent();\n    }\n\n    throw new Error(\n      `Could not find parent navigation with route \"${parent}\". Available routes are: '${ids.join(\"', '\")}'`\n    );\n  }\n\n  return navigation;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}